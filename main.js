'use strict';

const div = document.getElementById("data");
const foot = document.getElementById("foot");
const selector = document.querySelectorAll('.criteria');
let dataTree;
let fruit;

// Îß§Ï∂úÏûêÎ£å Í∞ÄÏ†∏Ïò§Í∏∞!!

const xlr = new XMLHttpRequest();
let monthData = "/data/CKD Prevenar Sales data(2022.04).xls";
xlr.open("GET", monthData);
xlr.overrideMimeType("text/xml");
xlr.onreadystatechange = function() {
  if (this.readyState == 4 && this.status == 200) {
    dataDealer.processXML(this.responseXML);
    dataTree = dataDealer.summerizer("Territory", "ÏùºÏûê", "ÏßÄÏó≠", "Í±∞ÎûòÏ≤òÎ™Ö");
    fruit = dataDealer.sumReport;

    selector[0].length = 1;
    for (let i in dataDealer.clan) {
      for (let j = 0; j < dataDealer.clan[i].length; j++) {
        let opt = document.createElement("option");
        opt.value = dataDealer.clan[i][j];
        opt.innerHTML = dataDealer.clan[i][j];
        selector[0].appendChild(opt);
      }
    }

    makeCover();

    selector[0].addEventListener("change", function() {
      let idx = selector[0].selectedIndex;
      let territory = selector[0][idx].value;
      selector[1].length = 1;
      if (territory != "GH") {
        for (let i = 0; i < dataDealer.terrOrg[territory].length; i++) {
          let opt = document.createElement("option");
          opt.value = dataDealer.terrOrg[territory][i];
          opt.innerHTML = dataDealer.terrOrg[territory][i];
          selector[1].appendChild(opt);
          selector[1].onchange = reportDaily;
        }
      }
      reportDaily();
    });
  }
};
xlr.send();

let calendar = document.querySelector('.fa-calendar-alt');
let menuBox = document.createElement("div");
menuBox.setAttribute("class", "bubble");
document.body.appendChild(menuBox);
let thisMonth = new Date().getMonth();
let thisYear = new Date().getFullYear();
let monthArray = ["Jan.", "Feb.", "Mar.", "Apr.", "May", "Jun.", "Jul.", "Aug.", "Sep.", "Oct.", "Nov.", "Dec."];
for (let i = 0; i < (thisYear - 2020) * 12 + thisMonth + 2; i++) {
  let menu = document.createElement("p");
  let count = Math.floor((thisMonth - i) / 12);
  let year = thisYear + count;
  let month = (thisMonth + (thisYear - 2019) * 12 - i) % 12;
  menu.style.padding = "3px 10px";
  menu.innerHTML = monthArray[month] + " " + year;
  menuBox.appendChild(menu);
  menu.onmouseover = function() {
    menu.style.color = "blue", menu.style.fontStyle = "italic";
  }
  menu.onmouseout = function() {
    menu.style.color = "black", menu.style.fontStyle = "normal";
  }
  menu.onclick = function() {
    div.innerHTML = "", foot.style.display = "none";
    let ring = document.createElement("div");
    ring.setAttribute("class", "ring");
    div.appendChild(ring);
    monthData = "/data/CKD Prevenar Sales data(" + year + "." + (month > 8 ? (month + 1) : "0" + (month + 1)) + ").xls"
    xlr.open("GET", monthData);
    xlr.overrideMimeType("text/xml");
    xlr.send();
    menuBox.style.display = "none";
  }
}
menuBox.style.display = "none";

calendar.onclick = function() {
  if (menuBox.style.display == "none") {
    menuBox.style.display = "block";
  } else {
    menuBox.style.display = "none";
  }
};

let clip = document.querySelector('.fa-redo');
clip.onclick = makeCover;

function makeCover() {
  selector[0].selectedIndex = 0, selector[1].length = 1;
  div.innerHTML = "", foot.style.display = "none";
  let coverData = {}, gradeData = dataDealer.summerizer("Territory", "Grade");
  let coverPage = document.createElement("div");
  coverPage.style.width = "100%";
  div.appendChild(coverPage);
  
  let localSum = 0;
  for (let i = 0; i < dataDealer.clan.local.length; i++) {
    let terr = dataDealer.clan.local[i];
    localSum += fruit[terr].total;
    coverData[terr] = {};
    for (let date in fruit[terr]) {
      for (let area in fruit[terr][date]) {
        if (area != "total") {
          coverData[terr][area] ?
            coverData[terr][area] += fruit[terr][date][area] : coverData[terr][area] = fruit[terr][date][area];
        }
      }
    }
  }

  for (let i = 0; i < dataDealer.clan.local.length; i++) {
    let terr = dataDealer.clan.local[i];
    let terrBox = document.createElement("div");
    terrBox.setAttribute("class", "line");
    coverPage.appendChild(terrBox);

    let title = document.createElement("div");
    terrBox.appendChild(title);
    title.innerHTML = `<span class="narrow" id=${terr}><i class="far fa-plus-square"></i></span>
      ${terr}: ${fruit[terr].total.toLocaleString()}
      (${(fruit[terr].total/localSum * 100).toFixed(1)}%)<br>`;

    let content = document.createElement("div");
    content.setAttribute("class", "has");
    terrBox.appendChild(content);
    if (terr == "others") {
      for (let area in coverData[terr]) {
        content.innerHTML += `<li class="item" id="${area}">${area}: ${coverData[terr][area]}
          (${(coverData[terr][area]/localSum * 100).toFixed(1)}%)</li>`;
      }
      for (let area in coverData[terr]) {
        let areaSales = document.getElementById(area);
        areaSales.addEventListener("click", function() {
          selector[0].value = terr;
          let opt = document.createElement("option");
          opt.innerHTML = area;
          selector[1].appendChild(opt);
          selector[1].value = area;
          reportDaily();
        });
      }
    } else {
      let area = dataDealer.terrOrg[terr];
      let color = ["red", "orange", "yellowgreen", "green", "skyblue", "blue", "purple"];
      /*let canvas = document.createElement("canvas");
      canvas.height = 220, canvas.width = 320;
      canvas.setAttribute("style", "{width: 300px; height: 220px;}");
      let context = canvas.getContext("2d");
      let startRad = -0.5 * Math.PI;
      context.fillStyle = "darkolivegreen";
      context.font = "1.6em Lucida Grande";
      context.fillText("üç© Territory ÎÇ¥ ÏßÄÏó≠Î≥Ñ ÎπÑÏ§ë üçâ", 20, 30);*/
      for (let i = 0; i < area.length; i++) {
        let areaSales = coverData[terr][area[i]];
        //let portion = (areaSales? areaSales : 0) / report.local[terr];
        //let posiRad = startRad + (0.5 + portion) * Math.PI;
        content.innerHTML += `<li class="item" id="${area[i]}">${area[i]}: ${areaSales? areaSales : 0}
          (${((areaSales? areaSales : 0)/localSum * 100).toFixed(1)}%)</li>`;
        /*context.beginPath();
        context.arc(125, 130, 65, startRad, startRad + portion * 2 * Math.PI, areaSales > 0 ? false : true);
        context.lineTo(125, 130);
        context.fillStyle = color[i];
        context.fill();
        context.fillRect(235, (canvas.height + 50) / 2 - 23 * area.length / 2 + 23 * i, 7, 7);
        if(portion > 0.01) {
          context.fillStyle = "black";
          context.font = "1.2em Lucida Grande";
          context.fillText((portion * 100).toFixed(0) + "%", 116 + 80 * Math.sin(posiRad), 136 - 80 * Math.cos(posiRad));
        }
        context.font = "1em Lucida Grande";
        context.fillText(area[i].substr(3), 250, (canvas.height + 63) / 2 - 23 * area.length / 2 + 23 * i);
        context.closePath();
        startRad += portion * 2 * Math.PI;*/
      }
      //content.appendChild(canvas);

      for (let i = 0; i < area.length; i++) {
        let areaSales = document.getElementById(area[i]);
        areaSales.onclick = function() {
          selector[0].value = terr;
          for (let j = 0; j < area.length; j++) {
            let opt = document.createElement("option");
            opt.setAttribute("value", area[j]);
            opt.innerHTML = area[j];
            selector[1].appendChild(opt);
            selector[1].onchange = reportDaily;
          }
          selector[1].value = area[i];
          reportDaily();
        };
      }

      let chartArea = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      chartArea.setAttribute("width", "340"), chartArea.setAttribute("height", "250");

      let title = document.createElementNS("http://www.w3.org/2000/svg", "text");
      title.setAttribute("x", 30), title.setAttribute("y", 35);
      title.innerHTML = "üåà Territory ÎÇ¥ ÏßÄÏó≠Î≥Ñ ÎπÑÏ§ë üåè";
      chartArea.appendChild(title);

      let startX = 130, startY = 75, endX, endY, portion = 0;
      for (let i = 0; i < area.length; i++) {
        let path = document.createElementNS("http://www.w3.org/2000/svg", "path");
        let areaSales = coverData[terr][area[i]];
        let areaShare = (areaSales? areaSales : 0) / fruit[terr].total;
        let largeArcFlag = areaShare > 0.5 ? 1 : 0;
        let posiRad = portion + areaShare * Math.PI;
        portion += 2 * Math.PI * areaShare;
        endX = 130 + 75 * Math.sin(portion), endY = 150 - 75 * Math.cos(portion);
        path.setAttribute("fill", color[i]), path.setAttribute("stroke", "white");
        path.setAttribute("d", `M 130 150 L ${startX} ${startY} A 75 75 0 ${largeArcFlag} 1 ${endX} ${endY} Z`);
        startX = endX, startY = endY;
        chartArea.appendChild(path);

        if (areaShare > 0.01) {
          let percent = document.createElementNS("http://www.w3.org/2000/svg", "text");
          percent.setAttribute("x", 120 + 90 * Math.sin(posiRad)), percent.setAttribute("y", 155 - 90 * Math.cos(posiRad));
          percent.setAttribute("font-size", `12px`);
          percent.innerHTML = `${(areaShare * 100).toFixed(0)}%`;
          chartArea.appendChild(percent);  
        }

        chartArea.innerHTML +=
          `<circle cx="255" cy=${162 - 23 * area.length / 2 + 23 * i} r="4" fill=${color[i]}></circle>
          <text x="265" y=${166 - 23 * area.length / 2 + 23 * i} font-size="10px">${area[i].substr(3)}</text>`;
      }
      content.appendChild(chartArea);
      let center = document.createElementNS("http://www.w3.org/2000/svg", "circle");
      center.setAttribute("cx", 130), center.setAttribute("cy", 150), center.setAttribute("r", 45), center.setAttribute("fill", "white");
      chartArea.appendChild(center);

      chartArea.innerHTML += `<text x="91" y="157" font-size="18px" font-style="italic" font-weight="bold" fill="darkolivegreen">VAC${terr}</text>`;

      if (terr == "2306") {
        let gradeChart = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        gradeChart.setAttribute("width", "340"), gradeChart.setAttribute("height", "250");
  
        let gradeTitle = document.createElementNS("http://www.w3.org/2000/svg", "text");
        gradeTitle.setAttribute("x", 30), gradeTitle.setAttribute("y", 35);
        gradeTitle.innerHTML = "‚õ≥ Territory ÎÇ¥ Îì±Í∏âÎ≥Ñ ÎπÑÏ§ë üé≥";
        gradeChart.appendChild(gradeTitle);
        let gradeColor = {A: "red", B: "blue", C: "yellowgreen", D: "lightgrey"};
        startX = 130, startY = 75, endX, endY, portion = 0;
        for (let grade in dataDealer.target) {
          let path = document.createElementNS("http://www.w3.org/2000/svg", "path");
          let gradeSales = gradeData[terr][grade] ? gradeData[terr][grade] : 0;
          let gradeShare = gradeSales / fruit[terr].total;
          let largeArcFlag = gradeShare > 0.5 ? 1 : 0;
          let posiRad = portion + gradeShare * Math.PI;
          portion += 2 * Math.PI * gradeShare;
          endX = 130 + 75 * Math.sin(portion), endY = 150 - 75 * Math.cos(portion);
          path.setAttribute("fill", gradeColor[grade]), path.setAttribute("stroke", "white");
          path.setAttribute("d", `M 130 150 L ${startX} ${startY} A 75 75 0 ${largeArcFlag} 1 ${endX} ${endY} Z`);
          startX = endX, startY = endY;
          gradeChart.appendChild(path);
  
          if (gradeShare > 0.01) {
            let percent = document.createElementNS("http://www.w3.org/2000/svg", "text");
            percent.setAttribute("x", 120 + 90 * Math.sin(posiRad)), percent.setAttribute("y", 155 - 90 * Math.cos(posiRad));
            percent.setAttribute("font-size", `12px`);
            percent.innerHTML = `${(gradeShare * 100).toFixed(0)}%`;
            gradeChart.appendChild(percent);  
          }
  
          gradeChart.innerHTML +=
            `<circle cx="255" cy=${116 + 23 * (grade.charCodeAt(0) - 65)} r="4" fill=${gradeColor[grade]}></circle>
            <text x="265" y=${120 + 23 * (grade.charCodeAt(0) - 65)} font-size="10px" font-style="italic">${grade} (${gradeSales} / ${fruit[terr].total})</text>`;
        }
        content.appendChild(gradeChart);
        let center = document.createElementNS("http://www.w3.org/2000/svg", "circle");
        center.setAttribute("cx", 130), center.setAttribute("cy", 150), center.setAttribute("r", 45), center.setAttribute("fill", "white");
        gradeChart.appendChild(center);

        gradeChart.innerHTML += `<text x="95" y="140" font-size="9px" font-style="italic" font-weight="bold" fill="darkolivegreen">Target Share</text>`;
        gradeChart.innerHTML += `<text x="108" y="160" font-size="18px" font-style="italic" font-weight="bold" fill="orange">${((1 - gradeData[terr].D / fruit[terr].total) * 100).toFixed(1)}%</text>`;
      }

    }

    let anchor = document.getElementById(terr);
    anchor.onclick = function() {
      if (content.classList.value == "has active") {
        anchor.innerHTML = '<i class="far fa-plus-square"></i>';
        title.style.color = "black", title.style.fontStyle = "normal", title.style.fontWeight = "normal";
      } else {
        anchor.innerHTML = '<i class="far fa-minus-square"></i>';
        title.style.color = "darkolivegreen", title.style.fontStyle = "italic", title.style.fontWeight = "bold";
      }
      content.classList.toggle('active');
    }
  }

  if (document.querySelectorAll('.bubble')) {
    let menuBox = document.querySelectorAll('.bubble');
    for (let i = 0; i < menuBox.length; i++) {
      menuBox[i].style.display = "none";
    }
  }
}

function reportDaily() {
  div.innerHTML = "", foot.innerHTML = "";
  let idx = selector[0].selectedIndex, territory = selector[0][idx].value;
  let idx2 = selector[1].selectedIndex, ticket = selector[1][idx2].value;
  let myData = dataTree[territory];
  let total = 0, day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  
  for (let date in myData) {
    let sum = 0;
    let unit = document.createElement("div");
    unit.setAttribute("class", "unit");
    div.insertBefore(unit, div.firstChild);
    let lid = document.createElement("div");
    lid.setAttribute("class", "lid");
    unit.appendChild(lid);
    let tempDate = new Date();
    tempDate.setFullYear(date.substr(0,4) * 1, date.substr(5,2) * 1 - 1, date.substr(8,2) * 1);
    lid.innerHTML = date + " " + day[tempDate.getDay()].substr(0,3) + ".";
    let belly = document.createElement("div");
    belly.setAttribute("class", "belly");
    unit.appendChild(belly);
    if (selector[1].selectedIndex) {
      let content = document.createElement("div");
      content.style.padding = "5px 10px 10px 15px";
      belly.appendChild(content);
      if (myData[date][ticket]) {
        for (let clinic in myData[date][ticket]) {
          content.innerHTML += ` ${clinic}: ${myData[date][ticket][clinic].toLocaleString()}` + "<br>";
          sum += myData[date][ticket][clinic];
        }  
      } else {
        content.innerHTML = `üí§ üí§ üí§`;
      }
      let bottom = document.createElement("div");
      bottom.setAttribute("class", "bottom");
      belly.appendChild(bottom);
      bottom.innerHTML += `total: ${sum.toLocaleString()}/${fruit[territory][date].total.toLocaleString()}
        (${(sum/fruit[territory][date].total * 100).toFixed(1)}%)` + "<br>";
    } else {
      for (let ticket in myData[date]) {
        belly.innerHTML += `<p class="belt">${ticket}</p>`;
        let content = document.createElement("div");
        content.style.padding = "5px 10px 10px 15px";
        belly.appendChild(content);
        for (let clinic in myData[date][ticket]) {
          content.innerHTML += ` ${clinic}: ${myData[date][ticket][clinic].toLocaleString()}` + "<br>";
          sum += myData[date][ticket][clinic];
        }
      }
      let bottom = document.createElement("div");
      bottom.setAttribute("class", "bottom");
      belly.appendChild(bottom);
      if (dataDealer.clan.local.indexOf(territory) != -1) {
        let terrSum = 0;
        for (let i = 0; i < dataDealer.clan.local.length; i++) {
          let terr = dataDealer.clan.local[i];
          fruit[terr][date] ? terrSum += fruit[terr][date].total : terrSum += 0;
        }
        bottom.innerHTML += `total: ${sum.toLocaleString()}/${terrSum.toLocaleString()}
          (${(sum/terrSum * 100).toFixed(1)}%)` + "<br>";
      } else {
        bottom.innerHTML += `total: ${sum.toLocaleString()}`;
      }
    }
    total += sum;
  }

  let showIt = document.createAttribute("style");
  showIt.value = "display: block";
  foot.setAttributeNode(showIt);
  if (selector[1].selectedIndex) {
    foot.innerHTML = `Territory ${territory} ÎÇ¥ ÎπÑÏ§ë(${ticket}): ${total.toLocaleString()}/${fruit[territory].total.toLocaleString()}
      (${(total/fruit[territory].total * 100).toFixed(1)}%)` + "<br>";
  } else if (territory != "NIP" && territory != "ÎèÑÎß§") {
    let localSum = 0;
    for (let i = 0; i < dataDealer.clan.local.length; i++) {
      let terr = dataDealer.clan.local[i];
      localSum += fruit[terr].total;
    }  
    if (territory == "GH") {
      foot.innerHTML = `${territory} ÎπÑÏ§ë: ${total.toLocaleString()}/${(localSum + fruit["GH"].total).toLocaleString()}
        (${(total/(localSum + fruit["GH"].total) * 100).toFixed(1)}%)` + "<br>";
    } else {
      foot.innerHTML = `Territory ${territory} ÎπÑÏ§ë: ${total.toLocaleString()}/${localSum.toLocaleString()}
        (${(total/localSum * 100).toFixed(1)}%)` + "<br>";
    }
  } else {
    foot.innerHTML = `${territory} ÎπÑÏ§ë: ${total.toLocaleString()}/${fruit.Total.toLocaleString()}
     (${(total/fruit.Total * 100).toFixed(1)}%)`;
  }
}

function processRaw(data) {
  let dataArray = [];
  let rows = data.getElementsByTagName("Row");
  for (let i = 0; i < rows.length; i++) {
    let rowArray = [];
    for (let j = 0; j < rows[i].childElementCount; j++) {
      rowArray.push(rows[i].children[j].textContent);
    }
    dataArray.push(rowArray);
  }
  return dataArray;
}

function getArea(address) {
  let distName = address.match(/[Í∞Ä-Ìû£]{2,3}[Íµ¨Íµ∞]{1}/);
  for (let idx in distObj) {
    for (let value of distObj[idx]) {
      if (value.indexOf(distName) != -1) {
        return idx;
      }
    }
  }
  distName = address.match(/[Í∞Ä-Ìû£]{2,3}Ïãú/);
  for (let idx in distObj) {
    if (distObj[idx].indexOf(distName[0]) != -1) {
      return idx;
    }
  }
  return null;
}

function getTerr(record) {
  for (let num in terrOrg) {
    if (record[5].indexOf("Î≥¥Í±¥") != -1 && record[5].indexOf("ÏùòÏõê") == -1) {
      return "NIP";
    } else if (record[record.length - 2].indexOf("ÎèÑÎß§") != -1) {
      return "ÎèÑÎß§";
    } else if (terrOrg[num].indexOf(record[record.length - 1]) != -1) {
      return num;
    }
  }
  return "";
}

function processData(dataArray, criteria, critAdded) {
  let summeryObj = {};
  let resultIdx = dataArray[0].indexOf("Îß§Ï∂úÎüâ");
  let idx = dataArray[0].indexOf(criteria);
  let idx2 = dataArray[0].indexOf(critAdded);
  for (let i = 1; i < dataArray.length; i++) {
    let salesVol = dataArray[i][resultIdx].replace(",", "") * 1;
    if (summeryObj[dataArray[i][idx]]) {
      if (critAdded) {
        summeryObj[dataArray[i][idx]][dataArray[i][idx2]] ?
          summeryObj[dataArray[i][idx]][dataArray[i][idx2]] += salesVol :
          summeryObj[dataArray[i][idx]][dataArray[i][idx2]] = salesVol;
      } else {
        summeryObj[dataArray[i][idx]] += salesVol;
      }
    } else {
      if (critAdded) {
        summeryObj[dataArray[i][idx]] = {};
        summeryObj[dataArray[i][idx]][dataArray[i][idx2]] = salesVol;
      } else {
        summeryObj[dataArray[i][idx]] = salesVol;
      }
    }
  }
  return summeryObj;
}

function processAddress(address) {
  let area, district;
  let wideArea = ["ÏÑúÏö∏", "Î∂ÄÏÇ∞", "Ïù∏Ï≤ú", "ÎåÄÍµ¨", "Í¥ëÏ£º", "ÎåÄÏ†Ñ", "Ïö∏ÏÇ∞", "Í≤ΩÍ∏∞", "Í∞ïÏõê", "Ï∂©Î∂Å", "Ï∂©ÎÇ®", "Ï†ÑÎ∂Å", "Ï†ÑÎÇ®", "Í≤ΩÎ∂Å", "Í≤ΩÎÇ®", "Ï†úÏ£º", "ÏÑ∏Ï¢Ö"];
  let metro = ["ÏÑúÏö∏", "Î∂ÄÏÇ∞", "Ïù∏Ï≤ú", "ÎåÄÍµ¨", "Í¥ëÏ£º", "ÎåÄÏ†Ñ", "Ïö∏ÏÇ∞"];
  let cities = ["Í≥†ÏñëÏãú", "ÏÑ±ÎÇ®Ïãú", "ÏàòÏõêÏãú", "ÏïàÏÇ∞Ïãú", "ÏïàÏñëÏãú", "Ïö©Ïù∏Ïãú", "Ï≤≠Ï£ºÏãú", "Ï≤úÏïàÏãú", "Ï†ÑÏ£ºÏãú", "Ìè¨Ìï≠Ïãú", "Ï∞ΩÏõêÏãú"];
  let addrString = address.replace(/\s/g, "");
  let iniTwo = addrString.substring(0,2), areaDouble;
  iniTwo == "Í≤ΩÏÉÅ" || iniTwo == "Ï†ÑÎùº" || iniTwo == "Ï∂©Ï≤≠" ?
    areaDouble = addrString.charAt(0) + addrString.charAt(2) :
    areaDouble = iniTwo;
  wideArea.indexOf(areaDouble) != -1 ?
    area = areaDouble :
    area = getArea(address);

  let startIdx, charNums;
  if (metro.indexOf(area) != -1) {
    addrString.indexOf("ÌäπÎ≥ÑÏãú") == 2 || addrString.indexOf("Í¥ëÏó≠Ïãú") == 2 ?
      startIdx = 5 :
      addrString.charAt(2) == "Ïãú" ?
        startIdx = 3 :
        startIdx = 2;
    addrString.substr(startIdx + 1, 3).indexOf("Íµ¨") != -1 ?
      charNums = addrString.substr(startIdx + 1, 3).indexOf("Íµ¨") + 2 :
      charNums = addrString.substr(startIdx + 1, 3).indexOf("Íµ∞") + 2;
  } else if (area != "ÏÑ∏Ï¢Ö") {
    addrString.charAt(1) == "ÎÇ®" || addrString.charAt(1) == "Î∂Å" ?
      startIdx = 2 :
      addrString.indexOf("ÎèÑ") < 7 && addrString.indexOf("ÎèÑ") != -1 ?
        startIdx = addrString.indexOf("ÎèÑ") + 1 :
        startIdx = 2;
    cities.indexOf(addrString.substr(startIdx, 3)) != -1 ?
      charNums = addrString.substr(startIdx, 8).indexOf("Íµ¨") + 1 :
      addrString.substr(startIdx + 1, 2).indexOf("Íµ∞") == 1 ?
        charNums = 3 :
        charNums = addrString.substr(startIdx + 1, 3).indexOf("Ïãú") + 2;
  } else {
    charNums = -1;
  }

  let regDist = addrString.substr(startIdx, charNums);
  let distList = distObj[area];
  charNums == 3 || charNums == 4 ?
    district = distList[distList.indexOf(regDist)] :
    charNums > 4 ?
      district = distList[distList.indexOf(regDist.replace("Ïãú", "Ïãú "))] :
      charNums == -1 ?
        district = "ÏÑ∏Ï¢ÖÏãú" :
        distList.indexOf(regDist) != -1 ?
          district = distList[distList.indexOf(regDist)] :
          area == "Ïù∏Ï≤ú" && regDist == "ÎÇ®Íµ¨" ?
            district = "ÎØ∏Ï∂îÌôÄÍµ¨" :
            district = distList[distList.indexOf(address.match(/[Í∞Ä-Ìû£]{2,3}[ÏãúÍµ∞Íµ¨]{1}/)[0])];
        
  return area + "/" + district;
}

function getTotal(dataArray) {
  let total;
  let refIdx = dataArray[0].indexOf("Íµ¨Î∂Ñ");
  let terrIdx = dataArray[0].indexOf("Territory");
  let resultIdx = dataArray[0].indexOf("Îß§Ï∂úÎüâ");
  for (let i = 1; i < dataArray.length; i++) {
    let salesVol = dataArray[i][resultIdx].replace(",", "") * 1;
    if (dataArray[i][refIdx].indexOf("ÎèÑÎß§") == -1 && dataArray[i][terrIdx] != "NIP") {
      total == null ?
        total = salesVol :
        total += salesVol;
    }
  }
  console.log(total);
}

const addrDealer = {

  wideArea: ["ÏÑúÏö∏", "Î∂ÄÏÇ∞", "Ïù∏Ï≤ú", "ÎåÄÍµ¨", "Í¥ëÏ£º", "ÎåÄÏ†Ñ", "Ïö∏ÏÇ∞", "Í≤ΩÍ∏∞", "Í∞ïÏõê", "Ï∂©Î∂Å", "Ï∂©ÎÇ®", "Ï†ÑÎ∂Å", "Ï†ÑÎÇ®", "Í≤ΩÎ∂Å", "Í≤ΩÎÇ®", "Ï†úÏ£º", "ÏÑ∏Ï¢Ö"],
  metro: ["ÏÑúÏö∏", "Î∂ÄÏÇ∞", "Ïù∏Ï≤ú", "ÎåÄÍµ¨", "Í¥ëÏ£º", "ÎåÄÏ†Ñ", "Ïö∏ÏÇ∞"],
  cities: ["Í≥†ÏñëÏãú", "ÏÑ±ÎÇ®Ïãú", "ÏàòÏõêÏãú", "ÏïàÏÇ∞Ïãú", "ÏïàÏñëÏãú", "Ïö©Ïù∏Ïãú", "Ï≤≠Ï£ºÏãú", "Ï≤úÏïàÏãú", "Ï†ÑÏ£ºÏãú", "Ìè¨Ìï≠Ïãú", "Ï∞ΩÏõêÏãú"],
  dong: {Ìò∏Í≥ÑÎèô: "ÏïàÏñëÏãú ÎèôÏïàÍµ¨", Í∂åÏÑ†Îèô: "ÏàòÏõêÏãú Í∂åÏÑ†Íµ¨", ÏÑ∏Î•òÎèô: "ÏàòÏõêÏãú Í∂åÏÑ†Íµ¨", Ï¥àÏßÄÎèô: "ÏïàÏÇ∞Ïãú Îã®ÏõêÍµ¨", ÏÉÅÌòÑÎèô: "Ïö©Ïù∏Ïãú ÏàòÏßÄÍµ¨", ÏåçÏö©Îèô: "Ï≤úÏïàÏãú ÏÑúÎ∂ÅÍµ¨", ÏÜ°Ï≤úÎèô: "Ï†ÑÏ£ºÏãú ÎçïÏßÑÍµ¨", ÏÑ±Ï†ïÎèô: "Ï≤úÏïàÏãú ÏÑúÎ∂ÅÍµ¨", ÎèôÏ≤úÎèô: "Ïö©Ïù∏Ïãú ÏàòÏßÄÍµ¨", Ïã†Î∂ÄÎèô: "Ï≤úÏïàÏãú ÎèôÎÇ®Íµ¨", Ïö©ÏïîÎèô: "Ï≤≠Ï£ºÏãú ÏÉÅÎãπÍµ¨", Ï†úÎèôÎ¶¨: "Ï∞ΩÏõêÏãú ÏùòÏ∞ΩÍµ¨", Íµ¨ÏõîÎèô: "ÎÇ®ÎèôÍµ¨"},

  ÏÑúÏö∏: ["Í∞ïÎÇ®Íµ¨", "Í∞ïÎèôÍµ¨", "Í∞ïÎ∂ÅÍµ¨", "Í∞ïÏÑúÍµ¨", "Í¥ÄÏïÖÍµ¨", "Í¥ëÏßÑÍµ¨", "Íµ¨Î°úÍµ¨", "Í∏àÏ≤úÍµ¨", "ÎÖ∏ÏõêÍµ¨", "ÎèÑÎ¥âÍµ¨", "ÎèôÎåÄÎ¨∏Íµ¨", "ÎèôÏûëÍµ¨", "ÎßàÌè¨Íµ¨", "ÏÑúÎåÄÎ¨∏Íµ¨", "ÏÑúÏ¥àÍµ¨", "ÏÑ±ÎèôÍµ¨", "ÏÑ±Î∂ÅÍµ¨", "ÏÜ°ÌååÍµ¨", "ÏñëÏ≤úÍµ¨", "ÏòÅÎì±Ìè¨Íµ¨", "Ïö©ÏÇ∞Íµ¨", "ÏùÄÌèâÍµ¨", "Ï¢ÖÎ°úÍµ¨", "Ï§ëÍµ¨", "Ï§ëÎûëÍµ¨"],
  Î∂ÄÏÇ∞: ["Í∞ïÏÑúÍµ¨", "Í∏àÏ†ïÍµ¨", "Í∏∞Ïû•Íµ∞", "ÎÇ®Íµ¨", "ÎèôÍµ¨", "ÎèôÎûòÍµ¨", "Î∂ÄÏÇ∞ÏßÑÍµ¨", "Î∂ÅÍµ¨", "ÏÇ¨ÏÉÅÍµ¨", "ÏÇ¨ÌïòÍµ¨", "ÏÑúÍµ¨", "ÏàòÏòÅÍµ¨", "Ïó∞Ï†úÍµ¨", "Ïó∞ÏàòÍµ¨", "ÏòÅÎèÑÍµ¨", "Ï§ëÍµ¨", "Ìï¥Ïö¥ÎåÄÍµ¨"],
  Ïù∏Ï≤ú: ["Í∞ïÌôîÍµ∞", "Í≥ÑÏñëÍµ¨", "ÎÇ®ÎèôÍµ¨", "ÎèôÍµ¨", "ÎØ∏Ï∂îÌôÄÍµ¨", "Î∂ÄÌèâÍµ¨", "ÏÑúÍµ¨", "Ïó∞ÏàòÍµ¨", "Ï§ëÍµ¨", "ÏòπÏßÑÍµ∞"],
  ÎåÄÍµ¨: ["ÎÇ®Íµ¨", "Îã¨ÏÑúÍµ¨", "Îã¨ÏÑ±Íµ∞", "ÎèôÍµ¨", "Î∂ÅÍµ¨", "ÏÑúÍµ¨", "ÏàòÏÑ±Íµ¨", "Ï§ëÍµ¨"],
  Í¥ëÏ£º: ["Í¥ëÏÇ∞Íµ¨", "ÎÇ®Íµ¨", "ÎèôÍµ¨", "Î∂ÅÍµ¨", "ÏÑúÍµ¨"],
  ÎåÄÏ†Ñ: ["ÎåÄÎçïÍµ¨", "ÎèôÍµ¨", "ÏÑúÍµ¨", "Ïú†ÏÑ±Íµ¨", "Ï§ëÍµ¨"],
  Ïö∏ÏÇ∞: ["ÎÇ®Íµ¨", "ÎèôÍµ¨", "Î∂ÅÍµ¨", "Ïö∏Ï£ºÍµ∞", "Ï§ëÍµ¨"],
  Í≤ΩÍ∏∞: ["Í∞ÄÌèâÍµ∞", "Í≥†ÏñëÏãú ÎçïÏñëÍµ¨", "Í≥†ÏñëÏãú ÏùºÏÇ∞ÎèôÍµ¨", "Í≥†ÏñëÏãú ÏùºÏÇ∞ÏÑúÍµ¨", "Í≥ºÏ≤úÏãú", "Í¥ëÎ™ÖÏãú", "Í¥ëÏ£ºÏãú", "Íµ¨Î¶¨Ïãú", "Íµ∞Ìè¨Ïãú", "ÍπÄÌè¨Ïãú", "ÎÇ®ÏñëÏ£ºÏãú", "ÎèôÎëêÏ≤úÏãú", "Î∂ÄÏ≤úÏãú", "ÏÑ±ÎÇ®Ïãú Î∂ÑÎãπÍµ¨", "ÏÑ±ÎÇ®Ïãú ÏàòÏ†ïÍµ¨", "ÏÑ±ÎÇ®Ïãú Ï§ëÏõêÍµ¨", "ÏàòÏõêÏãú Í∂åÏÑ†Íµ¨", "ÏàòÏõêÏãú ÏòÅÌÜµÍµ¨", "ÏàòÏõêÏãú Ïû•ÏïàÍµ¨", "ÏàòÏõêÏãú ÌåîÎã¨Íµ¨", "ÏãúÌù•Ïãú", "ÏïàÏÇ∞Ïãú Îã®ÏõêÍµ¨", "ÏïàÏÇ∞Ïãú ÏÉÅÎ°ùÍµ¨", "ÏïàÏÑ±Ïãú", "ÏïàÏñëÏãú ÎèôÏïàÍµ¨", "ÏïàÏñëÏãú ÎßåÏïàÍµ¨", "ÏñëÏ£ºÏãú", "ÏñëÌèâÍµ∞", "Ïó¨Ï£ºÏãú", "Ïó∞Ï≤úÍµ∞", "Ïò§ÏÇ∞Ïãú", "Ïö©Ïù∏Ïãú Í∏∞Ìù•Íµ¨", "Ïö©Ïù∏Ïãú ÏàòÏßÄÍµ¨", "Ïö©Ïù∏Ïãú Ï≤òÏù∏Íµ¨", "ÏùòÏôïÏãú", "ÏùòÏ†ïÎ∂ÄÏãú", "Ïù¥Ï≤úÏãú", "ÌååÏ£ºÏãú", "ÌèâÌÉùÏãú", "Ìè¨Ï≤úÏãú", "ÌïòÎÇ®Ïãú", "ÌôîÏÑ±Ïãú"],
  Í∞ïÏõê: ["Í∞ïÎ¶âÏãú", "Í≥†ÏÑ±Íµ∞", "ÎèôÌï¥Ïãú", "ÏÇºÏ≤ôÏãú", "ÏÜçÏ¥àÏãú", "ÏñëÍµ¨Íµ∞", "ÏñëÏñëÍµ∞", "ÏòÅÏõîÍµ∞", "ÏõêÏ£ºÏãú", "Ïù∏Ï†úÍµ∞", "Ï†ïÏÑ†Íµ∞", "Ï≤†ÏõêÍµ∞", "Ï∂òÏ≤úÏãú", "ÌÉúÎ∞±Ïãú", "ÌèâÏ∞ΩÍµ∞", "ÌôçÏ≤úÍµ∞", "ÌôîÏ≤úÍµ∞", "Ìö°ÏÑ±Íµ∞"],
  Ï∂©Î∂Å: ["Í¥¥ÏÇ∞Íµ∞", "Îã®ÏñëÍµ∞", "Î≥¥ÏùÄÍµ∞", "ÏòÅÎèôÍµ∞", "Ïò•Ï≤úÍµ∞", "ÏùåÏÑ±Íµ∞", "Ï†úÏ≤úÏãú", "Ï¶ùÌèâÍµ∞", "ÏßÑÏ≤úÍµ∞", "Ï≤≠Ï£ºÏãú ÏÉÅÎãπÍµ¨", "Ï≤≠Ï£ºÏãú ÏÑúÏõêÍµ¨", "Ï≤≠Ï£ºÏãú Ï≤≠ÏõêÍµ¨", "Ï≤≠Ï£ºÏãú Ìù•ÎçïÍµ¨", "Ï∂©Ï£ºÏãú"],
  Ï∂©ÎÇ®: ["Í≥ÑÎ£°Ïãú", "Í≥µÏ£ºÏãú", "Í∏àÏÇ∞Íµ∞", "ÎÖºÏÇ∞Ïãú", "ÎãπÏßÑÍµ∞", "ÎãπÏßÑÏãú", "Î≥¥Î†πÏãú", "Î∂ÄÏó¨Íµ∞", "ÏÑúÏÇ∞Ïãú", "ÏÑúÏ≤úÍµ∞", "ÏïÑÏÇ∞Ïãú", "ÏòàÏÇ∞Íµ∞", "Ï≤úÏïàÏãú ÎèôÎÇ®Íµ¨", "Ï≤úÏïàÏãú ÏÑúÎ∂ÅÍµ¨", "Ï≤≠ÏñëÍµ∞", "ÌÉúÏïàÍµ∞", "ÌôçÏÑ±Íµ∞"],
  Ï†ÑÎ∂Å: ["Í≥†Ï∞ΩÍµ∞", "Íµ∞ÏÇ∞Ïãú", "ÍπÄÏ†úÏãú", "ÎÇ®ÏõêÏãú", "Î¨¥Ï£ºÍµ∞", "Î∂ÄÏïàÍµ∞", "ÏàúÏ∞ΩÍµ∞", "ÏôÑÏ£ºÍµ∞", "ÏùµÏÇ∞Ïãú", "ÏûÑÏã§Íµ∞", "Ïû•ÏàòÍµ∞", "Ï†ÑÏ£ºÏãú ÎçïÏßÑÍµ¨", "Ï†ÑÏ£ºÏãú ÏôÑÏÇ∞Íµ¨", "Ï†ïÏùçÏãú", "ÏßÑÏïàÍµ∞"],
  Ï†ÑÎÇ®: ["Í∞ïÏßÑÍµ∞", "Í≥†Ìù•Íµ∞", "Í≥°ÏÑ±Íµ∞", "Í¥ëÏñëÏãú", "Íµ¨Î°ÄÍµ∞", "ÎÇòÏ£ºÏãú", "Îã¥ÏñëÍµ∞", "Î™©Ìè¨Ïãú", "Î¨¥ÏïàÍµ∞", "Î≥¥ÏÑ±Íµ∞", "ÏàúÏ≤úÏãú", "Ïã†ÏïàÍµ∞", "Ïó¨ÏàòÏãú", "ÏòÅÍ¥ëÍµ∞", "ÏòÅÏïîÍµ∞", "ÏôÑÎèÑÍµ∞", "Ïû•ÏÑ±Íµ∞", "Ïû•Ìù•Íµ∞", "ÏßÑÎèÑÍµ∞", "Ìï®ÌèâÍµ∞", "Ìï¥ÎÇ®Íµ∞", "ÌôîÏàúÍµ∞"],
  Í≤ΩÎ∂Å: ["Í≤ΩÏÇ∞Ïãú", "Í≤ΩÏ£ºÏãú", "Í≥†Î†πÍµ∞", "Íµ¨ÎØ∏Ïãú", "Íµ∞ÏúÑÍµ∞", "ÍπÄÏ≤úÏãú", "Î¨∏Í≤ΩÏãú", "Î¥âÌôîÍµ∞", "ÏÉÅÏ£ºÏãú", "ÏÑ±Ï£ºÍµ∞", "ÏïàÎèôÏãú", "ÏòÅÎçïÍµ∞", "ÏòÅÏñëÍµ∞", "ÏòÅÏ£ºÏãú", "ÏòÅÏ≤úÏãú", "ÏòàÏ≤úÍµ∞", "Ïö∏Î¶âÍµ∞", "Ïö∏ÏßÑÍµ∞", "ÏùòÏÑ±Íµ∞", "Ï≤≠ÎèÑÍµ∞", "Ï≤≠ÏÜ°Íµ∞", "Ïπ†Í≥°Íµ∞", "Ìè¨Ìï≠Ïãú ÎÇ®Íµ¨", "Ìè¨Ìï≠Ïãú Î∂ÅÍµ¨"],
  Í≤ΩÎÇ®: ["Í±∞Ï†úÏãú", "Í±∞Ï∞ΩÍµ∞", "Í≥†ÏÑ±Íµ∞", "ÍπÄÌï¥Ïãú", "ÎÇ®Ìï¥Íµ∞", "ÎÇ®Ìï¥Ïãú", "Î∞ÄÏñëÏãú", "ÏÇ¨Ï≤úÏãú", "ÏÇ∞Ï≤≠Íµ∞", "ÏñëÏÇ∞Ïãú", "ÏùòÎ†πÍµ∞", "Ïû•ÏäπÌè¨Ïãú", "ÏßÑÏ£ºÏãú", "ÏßÑÌï¥Ïãú", "Ï∞ΩÎÖïÍµ∞", "Ï∞ΩÏõêÏãú ÎßàÏÇ∞Ìï©Ìè¨Íµ¨", "Ï∞ΩÏõêÏãú ÎßàÏÇ∞ÌöåÏõêÍµ¨", "Ï∞ΩÏõêÏãú ÏÑ±ÏÇ∞Íµ¨", "Ï∞ΩÏõêÏãú ÏùòÏ∞ΩÍµ¨", "Ï∞ΩÏõêÏãú ÏßÑÌï¥Íµ¨", "ÌÜµÏòÅÏãú", "ÌïòÎèôÍµ∞", "Ìï®ÏïàÍµ∞", "Ìï®ÏñëÍµ∞", "Ìï©Ï≤úÍµ∞"],
  Ï†úÏ£º: ["ÏÑúÍ∑ÄÌè¨Ïãú", "Ï†úÏ£ºÏãú"],
  ÏÑ∏Ï¢Ö: [],
  
  getTicket: function(address) {
    //console.log(this.getDistrict(address), address, this.confirmDong(address), this.getArea(address));
    return this.getArea(address) + "/" + this.getDistrict(address);
  },

  getArea: function(address) {
    let area;
    let addrString = address.replace(/\s/g, "");
    let iniTwo = addrString.substring(0,2), areaDouble;
    iniTwo == "Í≤ΩÏÉÅ" || iniTwo == "Ï†ÑÎùº" || iniTwo == "Ï∂©Ï≤≠" ?
      areaDouble = addrString.charAt(0) + addrString.charAt(2) :
      areaDouble = iniTwo;
    this.wideArea.indexOf(areaDouble) != -1 ?
      area = areaDouble :
      area = this.confirmArea(address);
    return area;
  },
  confirmArea: function(address) {
    let distName = address.match(/[Í∞Ä-Ìû£]{2,3}[Íµ¨Íµ∞]{1}/);
    if (distName != "Í≥†ÏÑ±Íµ∞") {
      for (let i = 0; i < this.wideArea.length - 1; i++) {
        for (let j = 0; j < this[this.wideArea[i]].length; j++) {
          if (this[this.wideArea[i]][j].indexOf(distName) != -1) {
            return this.wideArea[i];
          }
        }
      }  
    } else {
      if (address.match(/[Í∞Ä-Ìï≥]{2}Î°ú/) == "ÎèôÏô∏Î°ú")
        return "Í≤ΩÎÇ®";
    }
    distName = address.match(/[Í∞Ä-Ìû£]{2,3}Ïãú/);
    for (let i = 0; i < this.wideArea.length - 1; i++) {
      for (let j = 0; j < this[this.wideArea[i]].length; j++) {
        if (this[this.wideArea[i]][j].indexOf(distName) != -1) {
          return this.wideArea[i];
        }
      }
    }
    return null;  
  },

  getDistrict: function(address) {
    let district, startIdx, charNums;
    let addrString = address.replace(/\s/g, "");
    let area = this.getArea(address);
    if (this.metro.indexOf(area) != -1) {
      addrString.indexOf("ÌäπÎ≥ÑÏãú") == 2 || addrString.indexOf("Í¥ëÏó≠Ïãú") == 2 ?
        startIdx = 5 :
        addrString.charAt(2) == "Ïãú" ?
          startIdx = 3 :
          this.wideArea.indexOf(addrString.substring(0,2)) != -1 ?
            startIdx = 2 :
            startIdx = 0;
      addrString.substr(startIdx + 1, 3).indexOf("Íµ¨") != -1 ?
        charNums = addrString.substr(startIdx + 1, 3).indexOf("Íµ¨") + 2 :
        addrString.substr(startIdx + 1, 3).indexOf("Íµ∞") != -1 ?
          charNums = addrString.substr(startIdx + 1, 3).indexOf("Íµ∞") + 2 :
          charNums = 2;
    } else if (area != "ÏÑ∏Ï¢Ö") {
      addrString.charAt(1) == "ÎÇ®" || addrString.charAt(1) == "Î∂Å" ?
        startIdx = 2 :
        addrString.indexOf("ÎèÑ") < 4 && addrString.indexOf("ÎèÑ") != -1 ?
          startIdx = addrString.indexOf("ÎèÑ") + 1 :
          this.wideArea.indexOf(addrString.substring(0,2)) != -1 ?
            startIdx = 2 :
            startIdx = 0;
      this.cities.indexOf(addrString.substr(startIdx, 3)) != -1 ?
        charNums = addrString.substr(startIdx, 8).indexOf("Íµ¨") + 1 :
        addrString.substr(startIdx + 1, 2).indexOf("Íµ∞") == 1 ?
          charNums = 3 :
          addrString.substr(startIdx + 1, 3).indexOf("Ïãú") != -1 ?
            charNums = addrString.substr(startIdx + 1, 3).indexOf("Ïãú") + 2 :
            charNums = 2;
    } else {
      charNums = -1;
    }
  
    let regDist = addrString.substr(startIdx, charNums);
    let distList = this[area];
    //console.log(this.confirmDong(address), charNums, distList.indexOf(regDist), address);
    charNums == 3 || (charNums == 4 && regDist.charAt(2) != "Íµ∞" && distList[distList.indexOf(regDist)]) ?
      district = distList[distList.indexOf(regDist)] :
      charNums > 4 ?
        district = distList[distList.indexOf(regDist.replace("Ïãú", "Ïãú "))] :
        charNums == -1 ?
          district = "ÏÑ∏Ï¢ÖÏãú" :
          distList && distList.indexOf(regDist) != -1 ?
            district = distList[distList.indexOf(regDist)] :
            area == "Ïù∏Ï≤ú" && regDist == "ÎÇ®Íµ¨" ?
              district = "ÎØ∏Ï∂îÌôÄÍµ¨" :
              (charNums == 2 && area != "Ï†úÏ£º") || (charNums == 4 && this.confirmDist(distList, regDist, address)) ?
                district = this.confirmDist(distList, regDist.substr(0,2), address) :
                district = distList[distList.indexOf(address.match(/[Í∞Ä-Ìû£]{2,3}[ÏãúÍµ∞Íµ¨]{1}/)[0])];
                if (!district) district = this.confirmDong(address);

    return district;
  },
  confirmDist: function(distList, regDist, address) {
    if (this.cities.indexOf(regDist.substr(0,2) + "Ïãú") == -1 && distList && regDist.charAt(1) != "Ïãú") {
      for (let i = 0; i < distList.length; i++) {
        if (distList[i].indexOf(regDist.substr(0,2)) == 0)
          return distList[i];
      }
      if (address.match(/[Í∞Ä-Ìû£]{2}Ïãú/)) {
        if (this.cities.indexOf(address.match(/[Í∞Ä-Ìû£]{2}Ïãú/)[0]) != -1) {
          return distList[distList.indexOf(address.match(/[Í∞Ä-Ìû£]{2}Ïãú [Í∞Ä-Ìû£]{1,4}Íµ¨/)[0])];
        } else {
          return distList[distList.indexOf(address.match(/[Í∞Ä-Ìû£]{2,3}Ïãú/)[0])];
        }
      } else {
        return distList[distList.indexOf(address.match(/[Í∞Ä-Ìû£]{1,3}Íµ¨/)[0])];
      }
    } else if (this.cities.indexOf(regDist.substr(0,2) + "Ïãú") != -1) {
      let gu = regDist.substr(0,2) + "Ïãú " + address.match(/[Í∞Ä-Ìû£]{1,4}Íµ¨/);
      for (let i = 0; i <distList.length; i++) {
        if (distList[i].indexOf(gu) == 0) {
          return distList[i];
        }
      }
    } else {
      return distList[distList.indexOf(address.match(/[Í∞Ä-Ìû£]{1,4}Íµ¨/)[0])];
    }
  },
  confirmDong: function(address) {
    let area = this.getArea(address);
    let dongName = address.match(/[Í∞Ä-Ìû£]{2}[ÎèôÎ¶¨]/);
    if (this[area].indexOf(this.dong[dongName]) != -1) {
      return this.dong[dongName];
    };
  }

}

const dataDealer = {

  terrOrg: {
    1303: ["Ïù∏Ï≤ú/ÎÇ®ÎèôÍµ¨", "Ïù∏Ï≤ú/ÎØ∏Ï∂îÌôÄÍµ¨", "Ïù∏Ï≤ú/Ïó∞ÏàòÍµ¨", "Ïù∏Ï≤ú/ÎèôÍµ¨", "ÏÑúÏö∏/Íµ¨Î°úÍµ¨", "Í≤ΩÍ∏∞/ÏãúÌù•Ïãú", "Í≤ΩÍ∏∞/ÏïàÏÇ∞Ïãú ÏÉÅÎ°ùÍµ¨"],
    2302: ["ÏÑúÏö∏/Í¥ëÏßÑÍµ¨", "ÏÑúÏö∏/ÎèôÎåÄÎ¨∏Íµ¨", "ÏÑúÏö∏/ÏÑ±ÎèôÍµ¨", "ÏÑúÏö∏/Ï§ëÎûëÍµ¨", "Í≤ΩÍ∏∞/Íµ¨Î¶¨Ïãú", "Í≤ΩÍ∏∞/Ìè¨Ï≤úÏãú", "Í≤ΩÍ∏∞/Í∞ÄÌèâÍµ∞"],
    2306: ["Í≤ΩÍ∏∞/ÏÑ±ÎÇ®Ïãú Î∂ÑÎãπÍµ¨", "Í≤ΩÍ∏∞/ÏÑ±ÎÇ®Ïãú ÏàòÏ†ïÍµ¨", "Í≤ΩÍ∏∞/ÏÑ±ÎÇ®Ïãú Ï§ëÏõêÍµ¨", "Í≤ΩÍ∏∞/Ïö©Ïù∏Ïãú ÏàòÏßÄÍµ¨"],
    others: [],
    GH: ["(Ìïô)Í∞ÄÌÜ®Î¶≠ÎåÄÌïôÍµêÏÑúÏö∏ÏÑ±Î™®Î≥ëÏõê", "(Ìïô)Ïπ¥ÌÜ®Î¶≠ÎåÄÌïôÍµêÏó¨ÏùòÎèÑÏÑ±Î™®Î≥ëÏõê", "Ïù∏Ï≤úÏÑ±Î™®Î≥ëÏõê (Ìïô)Í∞ÄÌÜ®Î¶≠ÎåÄÌïôÍµê", "(Ìïô)Í∞ÄÌÜ®Î¶≠ÌïôÏõêÏùòÏ†ïÎ∂ÄÏÑ±Î™®Î≥ëÏõê", "(Ìïô)Í∞ÄÌÜ®Î¶≠ÎåÄÌïôÍµêÎ∂ÄÏ≤úÏÑ±Î™®Î≥ëÏõê", "ÏÑ±ÎπàÏÑºÌä∏Î≥ëÏõê(Ìïô)Í∞ÄÌÜ®Î¶≠ÌïôÏõêÍ∞ÄÌÜ®Î¶≠ÎåÄÌïôÍµê", "Ïπ¥ÌÜ®Î¶≠ÎåÄÌïôÍµêÏùÄÌèâÏÑ±Î™®Î≥ëÏõê"],
    NIP: [],
    ÎèÑÎß§: []
  },

  clan: {
    local: ["1303", "2302", "2306", "others"],
    GH: ["GH"],
    NIP: ["NIP"],
    ÎèÑÎß§: ["ÎèÑÎß§"]
  },

  target: {
    A: [10008115,10008158,10008196,10008206,10008226,10008238,10008315,10008324,10008376,10008378,10008384,10008400,10008404,10010994,10012037,10012585,10037118,10042310,10042469,10044110,10050941,10054496],
    B: [10008179,10008195,10008235,10008268,10008284,10008293,10008403,10011038,10011072,10011078,10034710,10034905,10035787,10035949,10038724,10038972,10039176,10046460,10046917,10050899,10051268,10055541,10058466,10060994,10063493,10064917],
    C: [10008178,10008183,10008188,10008219,10008291,10008312,10008380,10010631,10010952,10011058,10035474,10035867,10051457,10059254],
    D: []
  },

  resultArray: [],
  header: [],
  sumReport: {},

  processXML: function(data) {
    let dataArray = [];
    let rows = data.getElementsByTagName("Row");
    for (let i = 0; i < rows.length; i++) {
      let rowArray = [];
      for (let j = 0; j < rows[i].childElementCount; j++) {
        rowArray.push(rows[i].children[j].textContent);
      }
      dataArray.push(rowArray);
    }

    let idx = dataArray[0].indexOf("Ï£ºÏÜå"), idx2 = dataArray[0].indexOf("ÏùºÏûê");
    dataArray[0].push("ÏßÄÏó≠", "Territory", "Clan", "Period", "Grade");
    this.header = dataArray[0];
    for (let i = 1; i < dataArray.length; i++) {
      let address = dataArray[i][idx];
      let areaDist = addrDealer.getTicket(address);
      dataArray[i].push(areaDist);

      let territory = this.getTerr(dataArray[i]);
      dataArray[i].push(territory);
      for (let group in this.clan) {
        if (this.clan[group].indexOf(territory) != -1) dataArray[i].push(group);
      }

      let date = dataArray[i][idx2];
      let period = date.match(/-(\d{2})-/)[1] % 12 + 1 + "P";
      dataArray[i].push(period);

      let grade = this.getGrade(dataArray[i]);
      dataArray[i].push(grade);
    }
    this.resultArray = dataArray;
    return dataArray;
  },

  getTerr: function(record) {
    let accountIdx = this.header.indexOf("Í±∞ÎûòÏ≤òÎ™Ö");
    let refIdx = this.header.indexOf("Íµ¨Î∂Ñ");
    let ticketIdx = this.header.indexOf("ÏßÄÏó≠");
    if (record[accountIdx].indexOf("Î≥¥Í±¥") != -1 && record[accountIdx].indexOf("ÏùòÏõê") == -1) {
      return "NIP";
    } else if (record[refIdx].indexOf("ÎèÑÎß§") != -1) {
      return "ÎèÑÎß§";
    } else if (this.terrOrg.GH.indexOf(record[accountIdx]) != -1) {
      return "GH";
    }
    for (let num in this.terrOrg) {
      if (this.terrOrg[num].indexOf(record[ticketIdx]) != -1) return num;
    }
    return "others";  
  },

  getGrade: function(record) {
    let codeIdx = this.header.indexOf("Í±∞ÎûòÏ≤ò"), accountIdx = this.header.indexOf("Í±∞ÎûòÏ≤òÎ™Ö");
    const gradeTag = {A: "red", B: "blue", C: "yellowgreen"};
    for (let grade in this.target) {
      if (this.target[grade].indexOf(record[codeIdx] * 1) != -1) {
        record[accountIdx] = `<font color=${gradeTag[grade]}><sup>‚Ä¢</sup></font>${record[accountIdx]}`;
        return grade;
      }
    }
    return "D";
  },

  summerizer: function(criteria1, criteria2, criteria3, criteria4) {
    let summeryObj = {};
    this.sumReport = {};
    let salesIdx = this.header.indexOf("Îß§Ï∂úÎüâ");
    let idx = this.header.indexOf(criteria1);
    let idx2 = this.header.indexOf(criteria2);
    let idx3 = this.header.indexOf(criteria3);
    let idx4 = this.header.indexOf(criteria4);
    for (let i = 1; i < this.resultArray.length; i++) {
      let salesVol = this.resultArray[i][salesIdx].replace(",", "") * 1;
      let item = this.resultArray[i][idx], item2 = this.resultArray[i][idx2], item3 = this.resultArray[i][idx3], item4 = this.resultArray[i][idx4];
      if (summeryObj[item]) {
        if (criteria2) {
          if (summeryObj[item][item2]) {
            if (criteria3) {
              if (summeryObj[item][item2][item3]) {
                if (criteria4) {
                  if (summeryObj[item][item2][item3][item4]) {
                    summeryObj[item][item2][item3][item4] += salesVol;
                    this.sumReport[item][item2][item3] += salesVol;
                    this.sumReport[item][item2]["total"] += salesVol;
                    this.sumReport[item]["total"] += salesVol;
                    this.sumReport["Total"] += salesVol;
                  } else {
                    summeryObj[item][item2][item3][item4] = salesVol;
                    this.sumReport[item][item2][item3] += salesVol;
                    this.sumReport[item][item2]["total"] += salesVol;
                    this.sumReport[item]["total"] += salesVol;
                    this.sumReport["Total"] += salesVol;
                  }
                } else {
                  summeryObj[item][item2][item3] += salesVol;
                  this.sumReport[item][item2] += salesVol;
                  this.sumReport[item]["total"] += salesVol;
                  this.sumReport["Total"] += salesVol;
                }
              } else if (criteria4) {
                summeryObj[item][item2][item3] = {};
                summeryObj[item][item2][item3][item4] = salesVol;
                this.sumReport[item][item2][item3] = salesVol;
                this.sumReport[item][item2]["total"] += salesVol;
                this.sumReport[item]["total"] += salesVol;
                this.sumReport["Total"] += salesVol;
              } else {
                summeryObj[item][item2][item3] = salesVol;
                this.sumReport[item][item2] += salesVol;
                this.sumReport[item]["total"] += salesVol;
                this.sumReport["Total"] += salesVol;
              }
            } else {
              summeryObj[item][item2] += salesVol;
              this.sumReport[item] += salesVol;
              this.sumReport["Total"] += salesVol;
            }
          } else if (criteria3 && criteria4) {
            summeryObj[item][item2] = {};
            summeryObj[item][item2][item3] = {};
            summeryObj[item][item2][item3][item4] = salesVol;
            this.sumReport[item][item2] = {};
            this.sumReport[item][item2][item3] = salesVol;
            this.sumReport[item][item2]["total"] = salesVol;
            this.sumReport[item]["total"] += salesVol;
            this.sumReport["Total"] += salesVol;
          } else if (criteria3) {
            summeryObj[item][item2] = {};
            summeryObj[item][item2][item3] = salesVol;
            this.sumReport[item][item2] = salesVol;
            this.sumReport[item]["total"] += salesVol;
            this.sumReport["Total"] += salesVol;
          } else {
            summeryObj[item][item2] = salesVol;
            this.sumReport[item] += salesVol;
            this.sumReport["Total"] += salesVol;
          }
        } else {
          summeryObj[item] += salesVol;
          this.sumReport["Total"] += salesVol;
        }
      } else {
        if (criteria2) {
          summeryObj[item] = {};
          if (criteria3) {
            summeryObj[item][item2] = {};
            this.sumReport[item] = {};
              if (criteria4) {
                summeryObj[item][item2][item3] = {};
                summeryObj[item][item2][item3][item4] = salesVol;
                this.sumReport[item][item2] = {};
                this.sumReport[item][item2][item3] = salesVol;
                this.sumReport[item][item2]["total"] = salesVol;
                this.sumReport[item]["total"] = salesVol;
                this.sumReport["Total"] ?
                  this.sumReport["Total"] += salesVol :
                  this.sumReport["Total"] = salesVol;
              } else {
                summeryObj[item][item2][item3] = salesVol;
                this.sumReport[item][item2] = salesVol;
                this.sumReport[item]["total"] = salesVol;
                this.sumReport["Total"] ?
                  this.sumReport["Total"] += salesVol :
                  this.sumReport["Total"] = salesVol;
              }
          } else {
            summeryObj[item][item2] = salesVol;
            this.sumReport[item] = salesVol;
            this.sumReport["Total"] ?
              this.sumReport["Total"] += salesVol :
              this.sumReport["Total"] = salesVol;
          }
        } else {
          summeryObj[item] = salesVol;
          this.sumReport["Total"] ?
            this.sumReport["Total"] += salesVol :
            this.sumReport["Total"] = salesVol;
        }
      }
    }
    return summeryObj;
  }
}

/*
let xhr = new XMLHttpRequest();
let accountHistory = {};
xhr.overrideMimeType("text/xml");
xhr.onreadystatechange = function() {
  if (this.readyState == 4 && this.status == 200) {
    dataDealer.processXML(this.responseXML);
    let accountSales = dataDealer.summerizer("Í±∞ÎûòÏ≤òÎ™Ö", "ÏùºÏûê");
    for (let account in accountSales) {
      if (accountHistory[account]) {
        for (let date in accountSales[account]) {
          accountHistory[account][date] = accountSales[account][date];
        }
      } else {
        accountHistory[account] = {};
        for (let date in accountSales[account]) {
          accountHistory[account][date] = accountSales[account][date];
        }
      }
    }
  }
};
for (let i = 0; i < 12; i++) {
  xhr.open("GET", "/data/CKD Prevenar Sales data(2021." + (i > 8 ? (i + 1) : "0" + (i + 1)) + ").xls", false);
  xhr.send();
}
//console.log(accountHistory);
*/

