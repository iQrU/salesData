'use strict';

const div = document.getElementById("data");
const foot = document.getElementById("foot");
const selector = document.querySelectorAll('.criteria');
let dataTree;
let fruit;

// Îß§Ï∂úÏûêÎ£å Í∞ÄÏ†∏Ïò§Í∏∞!!

const xlr = new XMLHttpRequest();
const thisMonth = new Date().getMonth();
const thisYear = new Date().getFullYear();
const theDate = new Date().getDate();
let year = thisYear, month = thisMonth + 1;
if (theDate < 20) {
  month = (thisMonth + 11) % 12 + 1;
  month == 12 ? year-- : null;
}
let monthData = `/data/CKD Prevenar Sales data(${year}.${month < 10 ? "0" + month : month}).xls`;
xlr.open("GET", monthData);
xlr.overrideMimeType("text/xml");
xlr.onreadystatechange = function () {
  if (this.readyState == 4 && this.status == 200) {
    dataDealer.processXML(this.responseXML);
    dataTree = dataDealer.summerizer("Territory", "ÏùºÏûê", "ÏßÄÏó≠", "Í±∞ÎûòÏ≤òÎ™Ö");
    fruit = dataDealer.sumReport;

    selector[0].length = 1;
    for (let i in dataDealer.clan) {
      for (let j = 0; j < dataDealer.clan[i].length; j++) {
        let opt = document.createElement("option");
        opt.value = dataDealer.clan[i][j];
        opt.innerHTML = dataDealer.clan[i][j];
        selector[0].appendChild(opt);
      }
    }

    makeCover();

    selector[0].addEventListener("change", function () {
      let idx = selector[0].selectedIndex;
      let territory = selector[0][idx].value;
      selector[1].length = 1;
      if (territory != "GH") {
        for (let i = 0; i < dataDealer.terrOrg[territory].length; i++) {
          let opt = document.createElement("option");
          opt.value = dataDealer.terrOrg[territory][i];
          opt.innerHTML = dataDealer.terrOrg[territory][i];
          selector[1].appendChild(opt);
          selector[1].onchange = reportDaily;
        }
      }
      reportDaily();
    });
  }
};
xlr.send();

const calendar = document.querySelector('.fa-calendar-alt');
const menuBox = document.createElement("div");
menuBox.setAttribute("class", "bubble");
document.body.appendChild(menuBox);
const menuWrap = document.createElement("div");
menuWrap.setAttribute("class", "wrap");
menuBox.appendChild(menuWrap);

const monthArray = ["Jan.", "Feb.", "Mar.", "Apr.", "May", "Jun.", "Jul.", "Aug.", "Sep.", "Oct.", "Nov.", "Dec."];
for (let i = 0; i < thisYear - 2018; i++) {
  const yearTag = document.createElement("p");
  const year = thisYear - i;
  yearTag.setAttribute("class", "belt");
  yearTag.innerHTML = year + "ÎÖÑ";
  menuWrap.appendChild(yearTag);
  const monthTag = document.createElement("div");
  monthTag.style.display = "flex";
  monthTag.style.flexWrap = "wrap";
  menuWrap.appendChild(monthTag);
  const lastMonth = i == 0 ? thisMonth : 11;
  const firstMonth = i == thisYear - 2019 ? 8 : 0;
  for (let j = lastMonth; j >= firstMonth; j--) {
    const month = monthArray[j];
    const monthBall = document.createElement("div");
    monthBall.setAttribute("class", "ball");
    monthBall.innerHTML = `<text id=${year + month}>${month}</text>`;
    monthTag.insertBefore(monthBall, monthTag.firstChild);

    const menu = document.getElementById(year + month);
    menu.onclick = function () {
      div.innerHTML = "", foot.style.display = "none";
      let ring = document.createElement("div");
      ring.setAttribute("class", "ring");
      div.appendChild(ring);
      monthData = "/data/CKD Prevenar Sales data(" + year + "." + (j > 8 ? (j + 1) : "0" + (j + 1)) + ").xls"
      xlr.open("GET", monthData);
      xlr.overrideMimeType("text/xml");
      xlr.send();
      menuBox.style.display = "none";
    }
  }
}
menuBox.style.display = "none";

calendar.onclick = function () {
  if (menuBox.style.display == "none") {
    menuBox.style.display = "block";
  } else {
    menuBox.style.display = "none";
  }
};
div.onclick = function() {
  menuBox.style.display = "none";
};
foot.onclick = function() {
  menuBox.style.display = "none";
};

let clip = document.querySelector('.fa-redo');
clip.onclick = makeCover;

function makeCover() {
  selector[0].selectedIndex = 0, selector[1].length = 1;
  div.innerHTML = "", foot.style.display = "none";
  const svgPath = {
    plus: `<svg xmlns="http://www.w3.org/2000/svg" class="far fa-plus-square" width="1em" height="1em" viewBox="0 0 1408 1408"><path fill="currentColor" d="M1152 672v64q0 14-9 23t-23 9H768v352q0 14-9 23t-23 9h-64q-14 0-23-9t-9-23V768H288q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h352V288q0-14 9-23t23-9h64q14 0 23 9t9 23v352h352q14 0 23 9t9 23zm128 448V288q0-66-47-113t-113-47H288q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113zm128-832v832q0 119-84.5 203.5T1120 1408H288q-119 0-203.5-84.5T0 1120V288Q0 169 84.5 84.5T288 0h832q119 0 203.5 84.5T1408 288z"/></svg>`,
    minus: `<svg xmlns="http://www.w3.org/2000/svg" class="far fa-minus-square" width="1em" height="1em"  viewBox="0 0 1408 1408"><path fill="currentColor" d="M1152 672v64q0 14-9 23t-23 9H288q-14 0-23-9t-9-23v-64q0-14 9-23t23-9h832q14 0 23 9t9 23zm128 448V288q0-66-47-113t-113-47H288q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113zm128-832v832q0 119-84.5 203.5T1120 1408H288q-119 0-203.5-84.5T0 1120V288Q0 169 84.5 84.5T288 0h832q119 0 203.5 84.5T1408 288z"/></svg>`
  };
  let coverData = {}, gradeData = dataDealer.summerizer("Territory", "Grade");
  let coverPage = document.createElement("div");
  coverPage.style.width = "100%";
  div.appendChild(coverPage);

  let localSum = 0;
  for (let i = 0; i < dataDealer.clan.local.length; i++) {
    let terr = dataDealer.clan.local[i];
    localSum += fruit[terr] ? fruit[terr].total : 0;
    coverData[terr] = {};
    for (let date in fruit[terr]) {
      for (let area in fruit[terr][date]) {
        if (area != "total") {
          coverData[terr][area] ?
            coverData[terr][area] += fruit[terr][date][area] : coverData[terr][area] = fruit[terr][date][area];
        }
      }
    }
  }

  for (let i = 0; i < dataDealer.clan.local.length; i++) {
    let terr = dataDealer.clan.local[i];
    let terrBox = document.createElement("div");
    terrBox.setAttribute("class", "line");
    coverPage.appendChild(terrBox);

    let title = document.createElement("div");
    terrBox.appendChild(title);
    title.innerHTML = `<span class="narrow" id=${terr}>${svgPath.plus}</span>
      ${terr}: ${fruit[terr] ? fruit[terr].total.toLocaleString() : 0}
      (${(fruit[terr] ? fruit[terr].total / localSum * 100 : 0).toFixed(1)}%)<br>`;

    let content = document.createElement("div");
    content.setAttribute("class", "has");
    terrBox.appendChild(content);
    if (terr == "others") {
      for (let area in coverData[terr]) {
        content.innerHTML += `<li class="item" id="${area}">${area}: ${coverData[terr][area]}
          (${(coverData[terr][area] / localSum * 100).toFixed(1)}%)</li>`;
      }
      for (let area in coverData[terr]) {
        let areaSales = document.getElementById(area);
        areaSales.addEventListener("click", function () {
          selector[0].value = terr;
          for (let area in coverData.others) {
            let opt = document.createElement("option");
            opt.innerHTML = area;
            selector[1].appendChild(opt);  
          }
          selector[1].value = area;
          reportDaily();
        });
      }
    } else {
      const area = dataDealer.terrOrg[terr];
      const color = ["red", "orange", "yellowgreen", "green", "skyblue", "blue", "purple", "violet", "pink", "gray", "brown"];

      for (let i = 0; i < area.length; i++) {
        let areaSales = coverData[terr][area[i]];
        content.innerHTML += `<li class="item" id="${area[i]}">${area[i]}: ${areaSales ? areaSales : 0}
          (${((areaSales ? areaSales : 0) / localSum * 100).toFixed(1)}%)</li>`;
      }

      for (let i = 0; i < area.length; i++) {
        let areaSales = document.getElementById(area[i]);
        areaSales.onclick = function () {
          selector[0].value = terr;
          for (let j = 0; j < area.length; j++) {
            let opt = document.createElement("option");
            opt.setAttribute("value", area[j]);
            opt.innerHTML = area[j];
            selector[1].appendChild(opt);
          }
          selector[1].value = area[i];
          reportDaily();
        };
      }

      let title = "üåà Territory ÎÇ¥ ÏßÄÏó≠Î≥Ñ ÎπÑÏ§ë üåè";
      bakeDonut(coverData[terr], area, 340, 250, content, color, title);

      if (terr == "2306") {
        let gradeTitle = "‚õ≥ Territory ÎÇ¥ Îì±Í∏âÎ≥Ñ ÎπÑÏ§ë üé≥";
        let gradeColor = { A: "red", B: "blue", C: "yellowgreen", D: "lightgrey" };
        bakeDonut(gradeData[terr], dataDealer.target, 340, 250, content, gradeColor, gradeTitle);
      }

    }

    let anchor = document.getElementById(terr);
    anchor.onclick = function () {
      if (content.classList.value == "has active") {
        anchor.innerHTML = `${svgPath.plus}`;
        title.style.color = "black", title.style.fontStyle = "normal", title.style.fontWeight = "normal";
      } else {
        anchor.innerHTML = `${svgPath.minus}`;
        title.style.color = "darkolivegreen", title.style.fontStyle = "italic", title.style.fontWeight = "bold";
      }
      content.classList.toggle('active');
    }
  }
  selector[1].onchange = reportDaily;

  if (document.querySelectorAll('.bubble')) {
    let menuBox = document.querySelectorAll('.bubble');
    for (let i = 0; i < menuBox.length; i++) {
      menuBox[i].style.display = "none";
    }
  }
}

function reportDaily() {
  div.innerHTML = "", foot.innerHTML = "", menuBox.style.display = "none";
  let idx = selector[0].selectedIndex, territory = selector[0][idx].value;
  let idx2 = selector[1].selectedIndex, ticket = selector[1][idx2].value;
  let myData = dataTree[territory];
  let total = 0, day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];

  for (let date in myData) {
    let sum = 0;
    let unit = document.createElement("div");
    unit.setAttribute("class", "unit");
    div.insertBefore(unit, div.firstChild);
    let lid = document.createElement("div");
    lid.setAttribute("class", "lid");
    unit.appendChild(lid);
    let tempDate = new Date();
    tempDate.setFullYear(date.substr(0, 4) * 1, date.substr(5, 2) * 1 - 1, date.substr(8, 2) * 1);
    lid.innerHTML = date + " " + day[tempDate.getDay()].substr(0, 3) + ".";
    let belly = document.createElement("div");
    belly.setAttribute("class", "belly");
    unit.appendChild(belly);
    if (selector[1].selectedIndex) {
      let content = document.createElement("div");
      content.style.padding = "5px 10px 10px 15px";
      belly.appendChild(content);
      if (myData[date][ticket]) {
        for (let clinic in myData[date][ticket]) {
          content.innerHTML += ` ${clinic}: ${myData[date][ticket][clinic].toLocaleString()}` + "<br>";
          sum += myData[date][ticket][clinic];
        }
      } else {
        content.innerHTML = `üí§ üí§ üí§`;
      }
      let bottom = document.createElement("div");
      bottom.setAttribute("class", "bottom");
      belly.appendChild(bottom);
      bottom.innerHTML += `total: ${sum.toLocaleString()}/${fruit[territory][date].total.toLocaleString()}
        (${(sum / fruit[territory][date].total * 100).toFixed(1)}%)` + "<br>";
    } else {
      for (let ticket in myData[date]) {
        belly.innerHTML += `<p class="belt">${ticket}</p>`;
        let content = document.createElement("div");
        content.style.padding = "5px 10px 10px 15px";
        belly.appendChild(content);
        for (let clinic in myData[date][ticket]) {
          content.innerHTML += ` ${clinic}: ${myData[date][ticket][clinic].toLocaleString()}` + "<br>";
          sum += myData[date][ticket][clinic];
        }
      }
      let bottom = document.createElement("div");
      bottom.setAttribute("class", "bottom");
      belly.appendChild(bottom);
      if (dataDealer.clan.local.indexOf(territory) != -1) {
        let terrSum = 0;
        for (let i = 0; i < dataDealer.clan.local.length; i++) {
          let terr = dataDealer.clan.local[i];
          fruit[terr] ? fruit[terr][date] ? terrSum += fruit[terr][date].total : terrSum += 0 : null;
        }
        bottom.innerHTML += `total: ${sum.toLocaleString()}/${terrSum.toLocaleString()}
          (${(sum / terrSum * 100).toFixed(1)}%)` + "<br>";
      } else {
        bottom.innerHTML += `total: ${sum.toLocaleString()}`;
      }
    }
    total += sum;
  }

  if (total == 0) div.innerHTML = "<br><p>„Ö§üòÇ„Ö§ üí§ üí§ üí§ „Ö§üôå</p><br><br>";

  let showIt = document.createAttribute("style");
  showIt.value = "display: block";
  foot.setAttributeNode(showIt);
  if (selector[1].selectedIndex) {
    foot.innerHTML = `Territory ${territory} ÎÇ¥ ÎπÑÏ§ë(${ticket}): ${total.toLocaleString()}/${fruit[territory].total.toLocaleString()}
      (${(total / fruit[territory].total * 100).toFixed(1)}%)` + "<br>";
  } else if (territory != "NIP" && territory != "ÎèÑÎß§") {
    let localSum = 0;
    for (let i = 0; i < dataDealer.clan.local.length; i++) {
      let terr = dataDealer.clan.local[i];
      localSum += fruit[terr] ? fruit[terr].total : 0;
    }
    if (territory == "GH") {
      foot.innerHTML = `${territory} ÎπÑÏ§ë: ${total.toLocaleString()}/${(localSum + (fruit["GH"] ? fruit["GH"].total : 0)).toLocaleString()}
        (${(total / (localSum + (fruit["GH"] ? fruit["GH"].total : 0)) * 100).toFixed(1)}%)` + "<br>";
    } else {
      foot.innerHTML = `Territory ${territory} ÎπÑÏ§ë: ${total.toLocaleString()}/${localSum.toLocaleString()}
        (${(total / localSum * 100).toFixed(1)}%)` + "<br>";
    }
  } else {
    foot.innerHTML = `${territory} ÎπÑÏ§ë: ${total.toLocaleString()}/${fruit.Total.toLocaleString()}
     (${(total / fruit.Total * 100).toFixed(1)}%)`;
  }
}

function bakeDonut(dataDough, legendSet, trayWidth, trayHeight, parentDiv, palette, title) {

  const donutTray = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  donutTray.setAttribute("width", trayWidth), donutTray.setAttribute("height", trayHeight);
  parentDiv.appendChild(donutTray);

  const banner = document.createElementNS("http://www.w3.org/2000/svg", "text");
  banner.setAttribute("x", donutTray.width.baseVal.value / 20);
  banner.setAttribute("y", donutTray.height.baseVal.value / 7);
  banner.innerHTML = title;
  donutTray.appendChild(banner);

  const center = { x: donutTray.width.baseVal.value * 17 / 50, y: donutTray.height.baseVal.value * 3 / 5 };
  const radius = donutTray.height.baseVal.value / 3.3;
  let startX = center.x, startY = center.y - radius, endX, endY, portion = 0;

  if (!Array.isArray(legendSet)) {
    let legendArray = [];
    for (let item in legendSet) {
      legendArray.push(item);
    }
    legendSet = legendArray;
  }

  let wholeSum = 0;
  for (let i = 0; i < legendSet.length; i++) {
    let item = legendSet[i];
    wholeSum += dataDough[item] ? dataDough[item] : 0;
  }

  const unitNum = legendSet.length > 7 ? legendSet.length > 8 ? Math.ceil(legendSet.length / 2) : Math.ceil(legendSet.length / 2) + 1 : legendSet.length;
  let positionX, positionY;
  for (let i = 0; i < legendSet.length; i++) {
    let item = legendSet[i], itemValue = dataDough[item] ? dataDough[item] : 0;
    let share = itemValue / wholeSum;
    let path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    let largeArcFlag = share > 0.5 ? 1 : 0;
    let posiRad = portion + share * Math.PI;
    portion += 2 * Math.PI * share;
    endX = center.x + radius * Math.sin(portion), endY = center.y - radius * Math.cos(portion);

    path.setAttribute("fill", Array.isArray(palette) ? palette[i % palette.length] : palette[item]);
    path.setAttribute("stroke", "white");
    path.setAttribute("d", `M ${center.x} ${center.y} L ${startX} ${startY} A ${radius} ${radius} 0 ${largeArcFlag} 1 ${endX} ${endY} Z`);
    startX = endX, startY = endY;
    donutTray.appendChild(path);

    if (share > 0.01) {
      let percent = document.createElementNS("http://www.w3.org/2000/svg", "text");
      percent.setAttribute("x", center.x - 10 + 1.2 * radius * Math.sin(posiRad)), percent.setAttribute("y", center.y + 5 - 1.2 * radius * Math.cos(posiRad));
      percent.setAttribute("font-size", `12px`);
      percent.innerHTML = `${(share * 100).toFixed(0)}%`;
      donutTray.appendChild(percent);
    }

    positionX = donutTray.width.baseVal.value * 3 / (legendSet.length > 7 ? 4.6 : 4.2) + 78 * Math.floor(i / unitNum);
    positionY = donutTray.height.baseVal.value * 3 / 5 + 12 - 20 * (unitNum / 2 - i % unitNum);

    donutTray.innerHTML +=
      `<circle cx=${positionX} cy=${positionY} r="4" fill=${Array.isArray(palette) ? palette[i % palette.length] : palette[item]}></circle>`;
    if (legendSet[i].length == 1) {
      donutTray.innerHTML += `<text x=${positionX + 10} y=${positionY + 4} font-size="10px" font-style="italic">${legendSet[i]} (${itemValue} / ${wholeSum})</text>`;
    } else {
      donutTray.innerHTML += `<text x=${positionX + 10} y=${positionY + 4} font-size="10px" font-style="italic">${legendSet[i].indexOf("/") != -1 ? legendSet[i].substr(3) : legendSet[i]}</text>`;
    }
  }

  let hole = document.createElementNS("http://www.w3.org/2000/svg", "circle");
  hole.setAttribute("cx", center.x), hole.setAttribute("cy", center.y);
  hole.setAttribute("r", radius * 3 / 5), hole.setAttribute("fill", "white");
  donutTray.appendChild(hole);

  if (legendSet[3] == "D") {
    donutTray.innerHTML += `<text x=${center.x - 36} y=${center.y - radius / 2 * Math.sin(Math.PI / 12)} font-size="9px" font-style="italic" font-weight="bold" fill="darkolivegreen">Target Share</text>`;
    donutTray.innerHTML += `<text x=${center.x - 25} y=${center.y + radius / 2 * Math.sin(Math.PI / 12)} font-size="18px" font-style="italic" font-weight="bold" fill="orange">${((1 - dataDough.D / wholeSum) * 100).toFixed(1)}%</text>`;
  } else {
    let territory;
    for (let terr in dataDealer.terrOrg) {
      if (dataDealer.terrOrg[terr] == legendSet) territory = terr;
    }
    donutTray.innerHTML += `<text x=${center.x - 40} y=${center.y + 7} font-size="18px" font-style="italic" font-weight="bold" fill="darkolivegreen">VAC${territory}</text>`;
  }

}

const addrDealer = {

  wideArea: ["ÏÑúÏö∏", "Î∂ÄÏÇ∞", "Ïù∏Ï≤ú", "ÎåÄÍµ¨", "Í¥ëÏ£º", "ÎåÄÏ†Ñ", "Ïö∏ÏÇ∞", "Í≤ΩÍ∏∞", "Í∞ïÏõê", "Ï∂©Î∂Å", "Ï∂©ÎÇ®", "Ï†ÑÎ∂Å", "Ï†ÑÎÇ®", "Í≤ΩÎ∂Å", "Í≤ΩÎÇ®", "Ï†úÏ£º", "ÏÑ∏Ï¢Ö"],
  metro: ["ÏÑúÏö∏", "Î∂ÄÏÇ∞", "Ïù∏Ï≤ú", "ÎåÄÍµ¨", "Í¥ëÏ£º", "ÎåÄÏ†Ñ", "Ïö∏ÏÇ∞"],
  cities: ["Í≥†ÏñëÏãú", "ÏÑ±ÎÇ®Ïãú", "ÏàòÏõêÏãú", "ÏïàÏÇ∞Ïãú", "ÏïàÏñëÏãú", "Ïö©Ïù∏Ïãú", "Ï≤≠Ï£ºÏãú", "Ï≤úÏïàÏãú", "Ï†ÑÏ£ºÏãú", "Ìè¨Ìï≠Ïãú", "Ï∞ΩÏõêÏãú"],
  dong: {
    Î∂ÄÏÇ∞: { Ïó∞ÏÇ∞Îèô: "Ïó∞Ï†úÍµ¨" },
    Ïù∏Ï≤ú: { Íµ¨ÏõîÎèô: "ÎÇ®ÎèôÍµ¨" },
    ÎåÄÏ†Ñ: { Î¥âÎ™ÖÎèô: "Ïú†ÏÑ±Íµ¨" },
    Í≤ΩÍ∏∞: { Ìò∏Í≥ÑÎèô: "ÏïàÏñëÏãú ÎèôÏïàÍµ¨", Í∂åÏÑ†Îèô: "ÏàòÏõêÏãú Í∂åÏÑ†Íµ¨", ÏÑ∏Î•òÎèô: "ÏàòÏõêÏãú Í∂åÏÑ†Íµ¨", Ï¥àÏßÄÎèô: "ÏïàÏÇ∞Ïãú Îã®ÏõêÍµ¨", ÏÉÅÌòÑÎèô: "Ïö©Ïù∏Ïãú ÏàòÏßÄÍµ¨", ÎèôÏ≤úÎèô: "Ïö©Ïù∏Ïãú ÏàòÏßÄÍµ¨", Ïù¥ÎèôÎ©¥: "Ïö©Ïù∏Ïãú Ï≤òÏù∏Íµ¨", ÎåÄÌôîÎèô: "Í≥†ÏñëÏãú ÏùºÏÇ∞ÏÑúÍµ¨", ÏùºÏÇ∞Îèô: "Í≥†ÏñëÏãú ÏùºÏÇ∞ÏÑúÍµ¨", ÌÉÑÌòÑÎèô: "Í≥†ÏñëÏãú ÏùºÏÇ∞ÏÑúÍµ¨", ÏÇ¨Î¶¨ÌòÑÎèô: "Í≥†ÏñëÏãú ÏùºÏÇ∞ÎèôÍµ¨" },
    Ï∂©Î∂Å: { Ïö©ÏïîÎèô: "Ï≤≠Ï£ºÏãú ÏÉÅÎãπÍµ¨", Ïò§Ï∞ΩÎ©¥: "Ï≤≠Ï£ºÏãú Ï≤≠ÏõêÍµ¨", ÏÇºÏäπÎ©¥: "Î≥¥ÏùÄÍµ∞", ÏõêÎÇ®Î¶¨: "Î≥¥ÏùÄÍµ∞" },
    Ï∂©ÎÇ®: { ÏåçÏö©Îèô: "Ï≤úÏïàÏãú ÏÑúÎ∂ÅÍµ¨", ÏÑ±Ï†ïÎèô: "Ï≤úÏïàÏãú ÏÑúÎ∂ÅÍµ¨", Ïã†Î∂ÄÎèô: "Ï≤úÏïàÏãú ÎèôÎÇ®Íµ¨", Î≥ëÏ≤úÎ¶¨: "Ï≤úÏïàÏãú ÎèôÎÇ®Íµ¨", Î≥ëÏ≤úÎ©¥: "Ï≤úÏïàÏãú ÎèôÎÇ®Íµ¨" },
    Ï†ÑÎ∂Å: { ÏÜ°Ï≤úÎèô: "Ï†ÑÏ£ºÏãú ÎçïÏßÑÍµ¨" },
    Í≤ΩÎÇ®: { Ï†úÎèôÎ¶¨: "Ï∞ΩÏõêÏãú ÏùòÏ∞ΩÍµ¨", ÎåÄÏÇ∞Î©¥: "Ï∞ΩÏõêÏãú ÏùòÏ∞ΩÍµ¨", ÌåîÏö©Îèô: "Ï∞ΩÏõêÏãú ÏùòÏ∞ΩÍµ¨", ÎÇ¥ÏÑúÏùç: "Ï∞ΩÏõêÏãú ÎßàÏÇ∞ÌöåÏõêÍµ¨" },
    Ï†úÏ£º: { ÌïúÎ¶ºÏùç: "Ï†úÏ£ºÏãú" }
  },

  ÏÑúÏö∏: ["Í∞ïÎÇ®Íµ¨", "Í∞ïÎèôÍµ¨", "Í∞ïÎ∂ÅÍµ¨", "Í∞ïÏÑúÍµ¨", "Í¥ÄÏïÖÍµ¨", "Í¥ëÏßÑÍµ¨", "Íµ¨Î°úÍµ¨", "Í∏àÏ≤úÍµ¨", "ÎÖ∏ÏõêÍµ¨", "ÎèÑÎ¥âÍµ¨", "ÎèôÎåÄÎ¨∏Íµ¨", "ÎèôÏûëÍµ¨", "ÎßàÌè¨Íµ¨", "ÏÑúÎåÄÎ¨∏Íµ¨", "ÏÑúÏ¥àÍµ¨", "ÏÑ±ÎèôÍµ¨", "ÏÑ±Î∂ÅÍµ¨", "ÏÜ°ÌååÍµ¨", "ÏñëÏ≤úÍµ¨", "ÏòÅÎì±Ìè¨Íµ¨", "Ïö©ÏÇ∞Íµ¨", "ÏùÄÌèâÍµ¨", "Ï¢ÖÎ°úÍµ¨", "Ï§ëÍµ¨", "Ï§ëÎûëÍµ¨"],
  Î∂ÄÏÇ∞: ["Í∞ïÏÑúÍµ¨", "Í∏àÏ†ïÍµ¨", "Í∏∞Ïû•Íµ∞", "ÎÇ®Íµ¨", "ÎèôÍµ¨", "ÎèôÎûòÍµ¨", "Î∂ÄÏÇ∞ÏßÑÍµ¨", "Î∂ÅÍµ¨", "ÏÇ¨ÏÉÅÍµ¨", "ÏÇ¨ÌïòÍµ¨", "ÏÑúÍµ¨", "ÏàòÏòÅÍµ¨", "Ïó∞Ï†úÍµ¨", "ÏòÅÎèÑÍµ¨", "Ï§ëÍµ¨", "Ìï¥Ïö¥ÎåÄÍµ¨"],
  Ïù∏Ï≤ú: ["Í∞ïÌôîÍµ∞", "Í≥ÑÏñëÍµ¨", "ÎÇ®ÎèôÍµ¨", "ÎèôÍµ¨", "ÎØ∏Ï∂îÌôÄÍµ¨", "Î∂ÄÌèâÍµ¨", "ÏÑúÍµ¨", "Ïó∞ÏàòÍµ¨", "Ï§ëÍµ¨", "ÏòπÏßÑÍµ∞"],
  ÎåÄÍµ¨: ["ÎÇ®Íµ¨", "Îã¨ÏÑúÍµ¨", "Îã¨ÏÑ±Íµ∞", "ÎèôÍµ¨", "Î∂ÅÍµ¨", "ÏÑúÍµ¨", "ÏàòÏÑ±Íµ¨", "Ï§ëÍµ¨"],
  Í¥ëÏ£º: ["Í¥ëÏÇ∞Íµ¨", "ÎÇ®Íµ¨", "ÎèôÍµ¨", "Î∂ÅÍµ¨", "ÏÑúÍµ¨"],
  ÎåÄÏ†Ñ: ["ÎåÄÎçïÍµ¨", "ÎèôÍµ¨", "ÏÑúÍµ¨", "Ïú†ÏÑ±Íµ¨", "Ï§ëÍµ¨"],
  Ïö∏ÏÇ∞: ["ÎÇ®Íµ¨", "ÎèôÍµ¨", "Î∂ÅÍµ¨", "Ïö∏Ï£ºÍµ∞", "Ï§ëÍµ¨"],
  Í≤ΩÍ∏∞: ["Í∞ÄÌèâÍµ∞", "Í≥†ÏñëÏãú ÎçïÏñëÍµ¨", "Í≥†ÏñëÏãú ÏùºÏÇ∞ÎèôÍµ¨", "Í≥†ÏñëÏãú ÏùºÏÇ∞ÏÑúÍµ¨", "Í≥ºÏ≤úÏãú", "Í¥ëÎ™ÖÏãú", "Í¥ëÏ£ºÏãú", "Íµ¨Î¶¨Ïãú", "Íµ∞Ìè¨Ïãú", "ÍπÄÌè¨Ïãú", "ÎÇ®ÏñëÏ£ºÏãú", "ÎèôÎëêÏ≤úÏãú", "Î∂ÄÏ≤úÏãú", "ÏÑ±ÎÇ®Ïãú Î∂ÑÎãπÍµ¨", "ÏÑ±ÎÇ®Ïãú ÏàòÏ†ïÍµ¨", "ÏÑ±ÎÇ®Ïãú Ï§ëÏõêÍµ¨", "ÏàòÏõêÏãú Í∂åÏÑ†Íµ¨", "ÏàòÏõêÏãú ÏòÅÌÜµÍµ¨", "ÏàòÏõêÏãú Ïû•ÏïàÍµ¨", "ÏàòÏõêÏãú ÌåîÎã¨Íµ¨", "ÏãúÌù•Ïãú", "ÏïàÏÇ∞Ïãú Îã®ÏõêÍµ¨", "ÏïàÏÇ∞Ïãú ÏÉÅÎ°ùÍµ¨", "ÏïàÏÑ±Ïãú", "ÏïàÏñëÏãú ÎèôÏïàÍµ¨", "ÏïàÏñëÏãú ÎßåÏïàÍµ¨", "ÏñëÏ£ºÏãú", "ÏñëÌèâÍµ∞", "Ïó¨Ï£ºÏãú", "Ïó∞Ï≤úÍµ∞", "Ïò§ÏÇ∞Ïãú", "Ïö©Ïù∏Ïãú Í∏∞Ìù•Íµ¨", "Ïö©Ïù∏Ïãú ÏàòÏßÄÍµ¨", "Ïö©Ïù∏Ïãú Ï≤òÏù∏Íµ¨", "ÏùòÏôïÏãú", "ÏùòÏ†ïÎ∂ÄÏãú", "Ïù¥Ï≤úÏãú", "ÌååÏ£ºÏãú", "ÌèâÌÉùÏãú", "Ìè¨Ï≤úÏãú", "ÌïòÎÇ®Ïãú", "ÌôîÏÑ±Ïãú"],
  Í∞ïÏõê: ["Í∞ïÎ¶âÏãú", "Í≥†ÏÑ±Íµ∞", "ÎèôÌï¥Ïãú", "ÏÇºÏ≤ôÏãú", "ÏÜçÏ¥àÏãú", "ÏñëÍµ¨Íµ∞", "ÏñëÏñëÍµ∞", "ÏòÅÏõîÍµ∞", "ÏõêÏ£ºÏãú", "Ïù∏Ï†úÍµ∞", "Ï†ïÏÑ†Íµ∞", "Ï≤†ÏõêÍµ∞", "Ï∂òÏ≤úÏãú", "ÌÉúÎ∞±Ïãú", "ÌèâÏ∞ΩÍµ∞", "ÌôçÏ≤úÍµ∞", "ÌôîÏ≤úÍµ∞", "Ìö°ÏÑ±Íµ∞"],
  Ï∂©Î∂Å: ["Í¥¥ÏÇ∞Íµ∞", "Îã®ÏñëÍµ∞", "Î≥¥ÏùÄÍµ∞", "ÏòÅÎèôÍµ∞", "Ïò•Ï≤úÍµ∞", "ÏùåÏÑ±Íµ∞", "Ï†úÏ≤úÏãú", "Ï¶ùÌèâÍµ∞", "ÏßÑÏ≤úÍµ∞", "Ï≤≠Ï£ºÏãú ÏÉÅÎãπÍµ¨", "Ï≤≠Ï£ºÏãú ÏÑúÏõêÍµ¨", "Ï≤≠Ï£ºÏãú Ï≤≠ÏõêÍµ¨", "Ï≤≠Ï£ºÏãú Ìù•ÎçïÍµ¨", "Ï∂©Ï£ºÏãú"],
  Ï∂©ÎÇ®: ["Í≥ÑÎ£°Ïãú", "Í≥µÏ£ºÏãú", "Í∏àÏÇ∞Íµ∞", "ÎÖºÏÇ∞Ïãú", "ÎãπÏßÑÏãú", "Î≥¥Î†πÏãú", "Î∂ÄÏó¨Íµ∞", "ÏÑúÏÇ∞Ïãú", "ÏÑúÏ≤úÍµ∞", "ÏïÑÏÇ∞Ïãú", "ÏòàÏÇ∞Íµ∞", "Ï≤úÏïàÏãú ÎèôÎÇ®Íµ¨", "Ï≤úÏïàÏãú ÏÑúÎ∂ÅÍµ¨", "Ï≤≠ÏñëÍµ∞", "ÌÉúÏïàÍµ∞", "ÌôçÏÑ±Íµ∞"],
  Ï†ÑÎ∂Å: ["Í≥†Ï∞ΩÍµ∞", "Íµ∞ÏÇ∞Ïãú", "ÍπÄÏ†úÏãú", "ÎÇ®ÏõêÏãú", "Î¨¥Ï£ºÍµ∞", "Î∂ÄÏïàÍµ∞", "ÏàúÏ∞ΩÍµ∞", "ÏôÑÏ£ºÍµ∞", "ÏùµÏÇ∞Ïãú", "ÏûÑÏã§Íµ∞", "Ïû•ÏàòÍµ∞", "Ï†ÑÏ£ºÏãú ÎçïÏßÑÍµ¨", "Ï†ÑÏ£ºÏãú ÏôÑÏÇ∞Íµ¨", "Ï†ïÏùçÏãú", "ÏßÑÏïàÍµ∞"],
  Ï†ÑÎÇ®: ["Í∞ïÏßÑÍµ∞", "Í≥†Ìù•Íµ∞", "Í≥°ÏÑ±Íµ∞", "Í¥ëÏñëÏãú", "Íµ¨Î°ÄÍµ∞", "ÎÇòÏ£ºÏãú", "Îã¥ÏñëÍµ∞", "Î™©Ìè¨Ïãú", "Î¨¥ÏïàÍµ∞", "Î≥¥ÏÑ±Íµ∞", "ÏàúÏ≤úÏãú", "Ïã†ÏïàÍµ∞", "Ïó¨ÏàòÏãú", "ÏòÅÍ¥ëÍµ∞", "ÏòÅÏïîÍµ∞", "ÏôÑÎèÑÍµ∞", "Ïû•ÏÑ±Íµ∞", "Ïû•Ìù•Íµ∞", "ÏßÑÎèÑÍµ∞", "Ìï®ÌèâÍµ∞", "Ìï¥ÎÇ®Íµ∞", "ÌôîÏàúÍµ∞"],
  Í≤ΩÎ∂Å: ["Í≤ΩÏÇ∞Ïãú", "Í≤ΩÏ£ºÏãú", "Í≥†Î†πÍµ∞", "Íµ¨ÎØ∏Ïãú", "Íµ∞ÏúÑÍµ∞", "ÍπÄÏ≤úÏãú", "Î¨∏Í≤ΩÏãú", "Î¥âÌôîÍµ∞", "ÏÉÅÏ£ºÏãú", "ÏÑ±Ï£ºÍµ∞", "ÏïàÎèôÏãú", "ÏòÅÎçïÍµ∞", "ÏòÅÏñëÍµ∞", "ÏòÅÏ£ºÏãú", "ÏòÅÏ≤úÏãú", "ÏòàÏ≤úÍµ∞", "Ïö∏Î¶âÍµ∞", "Ïö∏ÏßÑÍµ∞", "ÏùòÏÑ±Íµ∞", "Ï≤≠ÎèÑÍµ∞", "Ï≤≠ÏÜ°Íµ∞", "Ïπ†Í≥°Íµ∞", "Ìè¨Ìï≠Ïãú ÎÇ®Íµ¨", "Ìè¨Ìï≠Ïãú Î∂ÅÍµ¨"],
  Í≤ΩÎÇ®: ["Í±∞Ï†úÏãú", "Í±∞Ï∞ΩÍµ∞", "Í≥†ÏÑ±Íµ∞", "ÍπÄÌï¥Ïãú", "ÎÇ®Ìï¥Íµ∞", "ÎÇ®Ìï¥Ïãú", "Î∞ÄÏñëÏãú", "ÏÇ¨Ï≤úÏãú", "ÏÇ∞Ï≤≠Íµ∞", "ÏñëÏÇ∞Ïãú", "ÏùòÎ†πÍµ∞", "Ïû•ÏäπÌè¨Ïãú", "ÏßÑÏ£ºÏãú", "ÏßÑÌï¥Ïãú", "Ï∞ΩÎÖïÍµ∞", "Ï∞ΩÏõêÏãú ÎßàÏÇ∞Ìï©Ìè¨Íµ¨", "Ï∞ΩÏõêÏãú ÎßàÏÇ∞ÌöåÏõêÍµ¨", "Ï∞ΩÏõêÏãú ÏÑ±ÏÇ∞Íµ¨", "Ï∞ΩÏõêÏãú ÏùòÏ∞ΩÍµ¨", "Ï∞ΩÏõêÏãú ÏßÑÌï¥Íµ¨", "ÌÜµÏòÅÏãú", "ÌïòÎèôÍµ∞", "Ìï®ÏïàÍµ∞", "Ìï®ÏñëÍµ∞", "Ìï©Ï≤úÍµ∞"],
  Ï†úÏ£º: ["ÏÑúÍ∑ÄÌè¨Ïãú", "Ï†úÏ£ºÏãú"],
  ÏÑ∏Ï¢Ö: [],

  getTicket: function (address) {
    //console.log(this.getDistrict(address), address, this.confirmDong(address), this.getArea(address));
    return this.getArea(address) + "/" + this.getDistrict(address);
  },

  getArea: function (address) {
    let area;
    let addrString = address.replace(/\s/g, "");
    let iniTwo = addrString.substring(0, 2), areaDouble;
    iniTwo == "Í≤ΩÏÉÅ" || iniTwo == "Ï†ÑÎùº" || iniTwo == "Ï∂©Ï≤≠" ?
      areaDouble = addrString.charAt(0) + addrString.charAt(2) :
      areaDouble = iniTwo;
    this.wideArea.indexOf(areaDouble) != -1 ?
      area = areaDouble :
      area = this.confirmArea(address);
    return area;
  },
  confirmArea: function (address) {
    let distName = address.match(/[Í∞Ä-Ìû£]{2,3}[Íµ¨Íµ∞]{1}/);
    if (distName != "Í≥†ÏÑ±Íµ∞") {
      for (let i = 0; i < this.wideArea.length - 1; i++) {
        for (let j = 0; j < this[this.wideArea[i]].length; j++) {
          if (this[this.wideArea[i]][j].indexOf(distName) != -1) {
            return this.wideArea[i];
          }
        }
      }
    } else {
      if (address.match(/[Í∞Ä-Ìï≥]{2}Î°ú/) == "ÎèôÏô∏Î°ú")
        return "Í≤ΩÎÇ®";
    }
    distName = address.match(/[Í∞Ä-Ìû£]{2,3}Ïãú/);
    for (let i = 0; i < this.wideArea.length - 1; i++) {
      for (let j = 0; j < this[this.wideArea[i]].length; j++) {
        if (this[this.wideArea[i]][j].indexOf(distName) != -1) {
          return this.wideArea[i];
        }
      }
    }
    return null;
  },

  getDistrict: function (address) {
    let district, startIdx, charNums;
    let addrString = address.replace(/\s/g, "");
    let area = this.getArea(address);
    if (this.metro.indexOf(area) != -1) {
      addrString.indexOf("ÌäπÎ≥ÑÏãú") == 2 || addrString.indexOf("Í¥ëÏó≠Ïãú") == 2 ?
        startIdx = 5 :
        addrString.charAt(2) == "Ïãú" ?
          startIdx = 3 :
          this.wideArea.indexOf(addrString.substring(0, 2)) != -1 ?
            startIdx = 2 :
            startIdx = 0;
      addrString.substr(startIdx + 1, 3).indexOf("Íµ¨") != -1 ?
        charNums = addrString.substr(startIdx + 1, 3).indexOf("Íµ¨") + 2 :
        addrString.substr(startIdx + 1, 3).indexOf("Íµ∞") != -1 ?
          charNums = addrString.substr(startIdx + 1, 3).indexOf("Íµ∞") + 2 :
          charNums = 2;
    } else if (area != "ÏÑ∏Ï¢Ö") {
      addrString.charAt(1) == "ÎÇ®" || addrString.charAt(1) == "Î∂Å" ?
        startIdx = 2 :
        addrString.indexOf("ÎèÑ") < 4 && addrString.indexOf("ÎèÑ") != -1 ?
          startIdx = addrString.indexOf("ÎèÑ") + 1 :
          this.wideArea.indexOf(addrString.substring(0, 2)) != -1 ?
            startIdx = 2 :
            startIdx = 0;
      this.cities.indexOf(addrString.substr(startIdx, 3)) != -1 ?
        charNums = addrString.substr(startIdx, 8).indexOf("Íµ¨") + 1 :
        addrString.substr(startIdx + 1, 2).indexOf("Íµ∞") == 1 ?
          charNums = 3 :
          addrString.substr(startIdx + 1, 3).indexOf("Ïãú") != -1 ?
            charNums = addrString.substr(startIdx + 1, 3).indexOf("Ïãú") + 2 :
            charNums = 2;
    } else {
      charNums = -1;
    }

    let regDist = addrString.substr(startIdx, charNums);
    charNums > 4 ? regDist = regDist.replace("Ïãú", "Ïãú ") : null;
    const distList = this[area];
    const idx = distList.indexOf(regDist);

    idx != -1 ? district = distList[idx] :
      area == "Ïù∏Ï≤ú" && regDist == "ÎÇ®Íµ¨" ? district = "ÎØ∏Ï∂îÌôÄÍµ¨" :
        charNums == -1 ? district = "ÏÑ∏Ï¢ÖÏãú" :
          charNums != 0 ? district = this.confirmDist(distList, regDist, address) : null;

    if (!district) district = this.confirmDong(address);

    return district;
  },
  confirmDist: function (distList, regDist, address) {
    if (this.cities.indexOf(regDist.substr(0, 2) + "Ïãú") == -1 && distList && regDist.charAt(1) != "Ïãú") {
      for (let i = 0; i < distList.length; i++) {
        if (distList[i].indexOf(regDist.substr(0, 2)) == 0)
          return distList[i];
      }
      if (address.match(/[Í∞Ä-Ìû£]{2}Ïãú/)) {
        if (this.cities.indexOf(address.match(/[Í∞Ä-Ìû£]{2}Ïãú/)[0]) != -1) {
          return distList[distList.indexOf(address.match(/[Í∞Ä-Ìû£]{2}Ïãú [Í∞Ä-Ìû£]{1,4}Íµ¨/)[0])];
        } else {
          return distList[distList.indexOf(address.match(/[Í∞Ä-Ìû£]{2,3}Ïãú/)[0])];
        }
      } else if ((address.match(/[Í∞Ä-Ìû£]{1,3}Íµ¨/))) {
        return distList[distList.indexOf(address.match(/[Í∞Ä-Ìû£]{1,3}Íµ¨/)[0])];
      }
    } else {
      let gu;
      if (this.cities.indexOf(regDist + "Ïãú") != -1) {
        address = address.replace(regDist, regDist + "Ïãú ");
        gu = regDist + "Ïãú " + address.match(/[Í∞Ä-Ìû£]{1,4}Íµ¨/);
      } else {
        gu = address.match(/[Í∞Ä-Ìû£]{1,4}Íµ¨/);
      }
      return distList[distList.indexOf(`${gu}`)];
    }
  },
  confirmDong: function (address) {
    let area = this.getArea(address);
    let dongName = address.match(/[Í∞Ä-Ìû£]{2,3}[ÎèôÎ¶¨ÏùçÎ©¥]/);
    if (this[area].indexOf(this.dong[area][dongName]) != -1) {
      return this.dong[area][dongName];
    };
  }

};

const dataDealer = {

  terrOrg: {
    /*1301: ["Í≤ΩÍ∏∞/ÍπÄÌè¨Ïãú", "Í≤ΩÍ∏∞/ÌååÏ£ºÏãú", "Í≤ΩÍ∏∞/Í≥†ÏñëÏãú ÏùºÏÇ∞ÏÑúÍµ¨", "Í≤ΩÍ∏∞/Í≥†ÏñëÏãú ÏùºÏÇ∞ÎèôÍµ¨"],
    1302: ["Í≤ΩÍ∏∞/Î∂ÄÏ≤úÏãú", "Í≤ΩÍ∏∞/Í≥†ÏñëÏãú ÎçïÏñëÍµ¨", "Ïù∏Ï≤ú/Î∂ÄÌèâÍµ¨", "Ïù∏Ï≤ú/Í≥ÑÏñëÍµ¨", "Ïù∏Ï≤ú/ÏÑúÍµ¨", "Ïù∏Ï≤ú/Ï§ëÍµ¨", "Ïù∏Ï≤ú/Í∞ïÌôîÍµ∞"],
    1303: ["Ïù∏Ï≤ú/ÎÇ®ÎèôÍµ¨", "Ïù∏Ï≤ú/ÎØ∏Ï∂îÌôÄÍµ¨", "Ïù∏Ï≤ú/Ïó∞ÏàòÍµ¨", "Ïù∏Ï≤ú/ÎèôÍµ¨", "ÏÑúÏö∏/Íµ¨Î°úÍµ¨", "Í≤ΩÍ∏∞/ÏãúÌù•Ïãú", "Í≤ΩÍ∏∞/ÏïàÏÇ∞Ïãú ÏÉÅÎ°ùÍµ¨"],
    1304: ["ÏÑúÏö∏/ÎßàÌè¨Íµ¨", "ÏÑúÏö∏/ÏòÅÎì±Ìè¨Íµ¨", "ÏÑúÏö∏/ÏùÄÌèâÍµ¨", "ÏÑúÏö∏/ÎèôÏûëÍµ¨", "ÏÑúÏö∏/ÏñëÏ≤úÍµ¨"],
    1305: ["ÏÑúÏö∏/Í∞ïÎ∂ÅÍµ¨", "ÏÑúÏö∏/ÏÑúÎåÄÎ¨∏Íµ¨", "ÏÑúÏö∏/ÏÑ±Î∂ÅÍµ¨", "ÏÑúÏö∏/Ïö©ÏÇ∞Íµ¨", "ÏÑúÏö∏/Ï¢ÖÎ°úÍµ¨", "ÏÑúÏö∏/Ï§ëÍµ¨", "ÏÑúÏö∏/ÎèÑÎ¥âÍµ¨"],
    1306: ["ÏÑúÏö∏/Í¥ÄÏïÖÍµ¨", "ÏÑúÏö∏/Í∏àÏ≤úÍµ¨", "ÏÑúÏö∏/Í∞ïÏÑúÍµ¨", "Í≤ΩÍ∏∞/Í¥ëÎ™ÖÏãú", "Í≤ΩÍ∏∞/ÏïàÏñëÏãú ÎèôÏïàÍµ¨", "Í≤ΩÍ∏∞/ÏïàÏñëÏãú ÎßåÏïàÍµ¨"],
    1307: ["Í≤ΩÍ∏∞/ÏïàÏÇ∞Ïãú Îã®ÏõêÍµ¨", "Í≤ΩÍ∏∞/ÏïàÏÑ±Ïãú", "Í≤ΩÍ∏∞/ÌèâÌÉùÏãú", "Í≤ΩÍ∏∞/ÌôîÏÑ±Ïãú", "Í≤ΩÍ∏∞/Ïò§ÏÇ∞Ïãú"],*/
    2301: ["ÏÑúÏö∏/ÎÖ∏ÏõêÍµ¨", "Í≤ΩÍ∏∞/ÏùòÏ†ïÎ∂ÄÏãú", "Í≤ΩÍ∏∞/ÎÇ®ÏñëÏ£ºÏãú", "Í≤ΩÍ∏∞/ÏñëÏ£ºÏãú", "Í≤ΩÍ∏∞/ÎèôÎëêÏ≤úÏãú", "Í≤ΩÍ∏∞/Ïó∞Ï≤úÍµ∞"],
    2302: ["ÏÑúÏö∏/Í¥ëÏßÑÍµ¨", "ÏÑúÏö∏/ÎèôÎåÄÎ¨∏Íµ¨", "ÏÑúÏö∏/ÏÑ±ÎèôÍµ¨", "ÏÑúÏö∏/Ï§ëÎûëÍµ¨", "Í≤ΩÍ∏∞/Íµ¨Î¶¨Ïãú", "Í≤ΩÍ∏∞/Ìè¨Ï≤úÏãú", "Í≤ΩÍ∏∞/Í∞ÄÌèâÍµ∞"],
    2303: ["ÏÑúÏö∏/Í∞ïÎèôÍµ¨", "ÏÑúÏö∏/ÏÜ°ÌååÍµ¨", "Í≤ΩÍ∏∞/ÌïòÎÇ®Ïãú", "Í≤ΩÍ∏∞/Í¥ëÏ£ºÏãú"],
    2304: ["ÏÑúÏö∏/Í∞ïÎÇ®Íµ¨", "ÏÑúÏö∏/ÏÑúÏ¥àÍµ¨", "Í≤ΩÍ∏∞/Í≥ºÏ≤úÏãú", "Í≤ΩÍ∏∞/Íµ∞Ìè¨Ïãú", "Í≤ΩÍ∏∞/ÏùòÏôïÏãú"],
    2305: ["Í≤ΩÍ∏∞/ÏàòÏõêÏãú Í∂åÏÑ†Íµ¨", "Í≤ΩÍ∏∞/ÏàòÏõêÏãú ÏòÅÌÜµÍµ¨", "Í≤ΩÍ∏∞/ÏàòÏõêÏãú Ïû•ÏïàÍµ¨", "Í≤ΩÍ∏∞/ÏàòÏõêÏãú ÌåîÎã¨Íµ¨", "Í≤ΩÍ∏∞/Ïö©Ïù∏Ïãú Í∏∞Ìù•Íµ¨", "Í≤ΩÍ∏∞/Ïö©Ïù∏Ïãú Ï≤òÏù∏Íµ¨", "Í≤ΩÍ∏∞/Ïù¥Ï≤úÏãú", "Í≤ΩÍ∏∞/Ïó¨Ï£ºÏãú", "Í≤ΩÍ∏∞/ÏñëÌèâÍµ∞"],
    2306: ["Í≤ΩÍ∏∞/ÏÑ±ÎÇ®Ïãú Î∂ÑÎãπÍµ¨", "Í≤ΩÍ∏∞/ÏÑ±ÎÇ®Ïãú ÏàòÏ†ïÍµ¨", "Í≤ΩÍ∏∞/ÏÑ±ÎÇ®Ïãú Ï§ëÏõêÍµ¨", "Í≤ΩÍ∏∞/Ïö©Ïù∏Ïãú ÏàòÏßÄÍµ¨"],
    2307: ["Í∞ïÏõê/Í∞ïÎ¶âÏãú", "Í∞ïÏõê/Í≥†ÏÑ±Íµ∞", "Í∞ïÏõê/ÎèôÌï¥Ïãú", "Í∞ïÏõê/ÏÇºÏ≤ôÏãú", "Í∞ïÏõê/ÏÜçÏ¥àÏãú", "Í∞ïÏõê/ÏñëÍµ¨Íµ∞", "Í∞ïÏõê/ÏñëÏñëÍµ∞", "Í∞ïÏõê/ÏòÅÏõîÍµ∞", "Í∞ïÏõê/ÏõêÏ£ºÏãú", "Í∞ïÏõê/Ïù∏Ï†úÍµ∞", "Í∞ïÏõê/Ï†ïÏÑ†Íµ∞", "Í∞ïÏõê/Ï≤†ÏõêÍµ∞", "Í∞ïÏõê/Ï∂òÏ≤úÏãú", "Í∞ïÏõê/ÌÉúÎ∞±Ïãú", "Í∞ïÏõê/ÌèâÏ∞ΩÍµ∞", "Í∞ïÏõê/ÌôçÏ≤úÍµ∞", "Í∞ïÏõê/ÌôîÏ≤úÍµ∞", "Í∞ïÏõê/Ìö°ÏÑ±Íµ∞"],
    /*3301: ["Ï∂©ÎÇ®/ÎãπÏßÑÏãú", "Ï∂©ÎÇ®/ÏÑúÏÇ∞Ïãú", "Ï∂©ÎÇ®/ÏïÑÏÇ∞Ïãú", "Ï∂©ÎÇ®/Ï≤úÏïàÏãú ÎèôÎÇ®Íµ¨", "Ï∂©ÎÇ®/Ï≤úÏïàÏãú ÏÑúÎ∂ÅÍµ¨", "Ï∂©ÎÇ®/ÌÉúÏïàÍµ∞", "ÎåÄÏ†Ñ/ÎèôÍµ¨"],
    3302: ["ÎåÄÏ†Ñ/ÏÑúÍµ¨", "ÎåÄÏ†Ñ/Ï§ëÍµ¨", "Ï∂©ÎÇ®/Í≥ÑÎ£°Ïãú", "Ï∂©ÎÇ®/Í≥µÏ£ºÏãú", "Ï∂©ÎÇ®/Í∏àÏÇ∞Íµ∞", "Ï∂©ÎÇ®/ÎÖºÏÇ∞Ïãú", "Ï∂©ÎÇ®/Î≥¥Î†πÏãú", "Ï∂©ÎÇ®/Î∂ÄÏó¨Íµ∞", "Ï∂©ÎÇ®/ÏÑúÏ≤úÍµ∞", "Ï∂©ÎÇ®/ÏòàÏÇ∞Íµ∞", "Ï∂©ÎÇ®/Ï≤≠ÏñëÍµ∞", "Ï∂©ÎÇ®/ÌôçÏÑ±Íµ∞", "Ï∂©Î∂Å/Î≥¥ÏùÄÍµ∞", "Ï∂©Î∂Å/ÏòÅÎèôÍµ∞", "Ï∂©Î∂Å/Ïò•Ï≤úÍµ∞"],
    3303: ["ÏÑ∏Ï¢Ö/ÏÑ∏Ï¢ÖÏãú", "ÎåÄÏ†Ñ/ÎåÄÎçïÍµ¨", "Ï∂©Î∂Å/Ï≤≠Ï£ºÏãú ÏÉÅÎãπÍµ¨", "Ï∂©Î∂Å/Ï≤≠Ï£ºÏãú ÏÑúÏõêÍµ¨", "Ï∂©Î∂Å/Ï≤≠Ï£ºÏãú Ï≤≠ÏõêÍµ¨", "Ï∂©Î∂Å/Ï≤≠Ï£ºÏãú Ìù•ÎçïÍµ¨", "Ï∂©Î∂Å/Ï∂©Ï£ºÏãú", "Ï∂©Î∂Å/Ï†úÏ≤úÏãú", "Ï∂©Î∂Å/Í¥¥ÏÇ∞Íµ∞", "Ï∂©Î∂Å/Îã®ÏñëÍµ∞", "Ï∂©Î∂Å/ÏùåÏÑ±Íµ∞", "Ï∂©Î∂Å/Ï¶ùÌèâÍµ∞", "Ï∂©Î∂Å/ÏßÑÏ≤úÍµ∞"],
    3304: ["Ï†ÑÎ∂Å/Ï†ÑÏ£ºÏãú ÎçïÏßÑÍµ¨", "Ï†ÑÎ∂Å/Ï†ÑÏ£ºÏãú ÏôÑÏÇ∞Íµ¨", "Ï†ÑÎ∂Å/ÎÇ®ÏõêÏãú", "Ï†ÑÎ∂Å/Î¨¥Ï£ºÍµ∞", "Ï†ÑÎ∂Å/ÏàúÏ∞ΩÍµ∞", "Ï†ÑÎ∂Å/ÏôÑÏ£ºÍµ∞", "Ï†ÑÎ∂Å/ÏûÑÏã§Íµ∞", "Ï†ÑÎ∂Å/Ïû•ÏàòÍµ∞", "Ï†ÑÎ∂Å/ÏßÑÏïàÍµ∞", "ÎåÄÏ†Ñ/Ïú†ÏÑ±Íµ¨"],
    3305: ["Í¥ëÏ£º/Î∂ÅÍµ¨", "Ï†ÑÎÇ®/ÏàúÏ≤úÏãú", "Ï†ÑÎÇ®/Ïó¨ÏàòÏãú", "Ï†ÑÎÇ®/Í¥ëÏñëÏãú", "Ï†ÑÎÇ®/Í≥°ÏÑ±Íµ∞", "Ï†ÑÎÇ®/Íµ¨Î°ÄÍµ∞", "Ï†ÑÎÇ®/Îã¥ÏñëÍµ∞"],
    3306: ["Í¥ëÏ£º/Í¥ëÏÇ∞Íµ¨", "Ï†ÑÎ∂Å/ÏùµÏÇ∞Ïãú", "Ï†ÑÎ∂Å/Íµ∞ÏÇ∞Ïãú", "Ï†ÑÎ∂Å/Ï†ïÏùçÏãú", "Ï†ÑÎ∂Å/ÍπÄÏ†úÏãú", "Ï†ÑÎ∂Å/Î∂ÄÏïàÍµ∞", "Ï†ÑÎ∂Å/Í≥†Ï∞ΩÍµ∞"],
    3307: ["Í¥ëÏ£º/ÎÇ®Íµ¨", "Í¥ëÏ£º/ÎèôÍµ¨", "Í¥ëÏ£º/ÏÑúÍµ¨", "Ï†ÑÎÇ®/Í∞ïÏßÑÍµ∞", "Ï†ÑÎÇ®/Í≥†Ìù•Íµ∞", "Ï†ÑÎÇ®/ÎÇòÏ£ºÏãú", "Ï†ÑÎÇ®/Î™©Ìè¨Ïãú", "Ï†ÑÎÇ®/Î¨¥ÏïàÍµ∞", "Ï†ÑÎÇ®/Î≥¥ÏÑ±Íµ∞", "Ï†ÑÎÇ®/Ïã†ÏïàÍµ∞", "Ï†ÑÎÇ®/ÏòÅÏïîÍµ∞", "Ï†ÑÎÇ®/ÏòÅÍ¥ëÍµ∞", "Ï†ÑÎÇ®/ÏôÑÎèÑÍµ∞", "Ï†ÑÎÇ®/Ïû•ÏÑ±Íµ∞", "Ï†ÑÎÇ®/Ïû•Ìù•Íµ∞", "Ï†ÑÎÇ®/ÏßÑÎèÑÍµ∞", "Ï†ÑÎÇ®/Ìï®ÌèâÍµ∞", "Ï†ÑÎÇ®/Ìï¥ÎÇ®Íµ∞", "Ï†ÑÎÇ®/ÌôîÏàúÍµ∞"],
    4301: ["ÎåÄÍµ¨/Î∂ÅÍµ¨", "Í≤ΩÎ∂Å/Íµ¨ÎØ∏Ïãú", "Í≤ΩÎ∂Å/ÏïàÎèôÏãú", "Í≤ΩÎ∂Å/Ïπ†Í≥°Íµ∞", "Í≤ΩÎ∂Å/ÏòàÏ≤úÍµ∞"],
    4302: ["ÎåÄÍµ¨/Îã¨ÏÑúÍµ¨", "ÎåÄÍµ¨/ÏÑúÍµ¨", "ÎåÄÍµ¨/Îã¨ÏÑ±Íµ∞", "Í≤ΩÎ∂Å/Î¨∏Í≤ΩÏãú", "Í≤ΩÎ∂Å/ÍπÄÏ≤úÏãú", "Í≤ΩÎ∂Å/ÏÉÅÏ£ºÏãú", "Í≤ΩÎ∂Å/Í≥†Î†πÍµ∞", "Í≤ΩÎ∂Å/ÏÑ±Ï£ºÍµ∞"],
    4303: ["ÎåÄÍµ¨/ÎèôÍµ¨", "Í≤ΩÎ∂Å/Ìè¨Ìï≠Ïãú ÎÇ®Íµ¨", "Í≤ΩÎ∂Å/Ìè¨Ìï≠Ïãú Î∂ÅÍµ¨", "Í≤ΩÎ∂Å/Í≤ΩÏ£ºÏãú", "Í≤ΩÎ∂Å/ÏòÅÏ≤úÏãú", "Í≤ΩÎ∂Å/ÏòÅÏ£ºÏãú", "Í≤ΩÎ∂Å/Ïö∏ÏßÑÍµ∞", "Í≤ΩÎ∂Å/ÏòÅÎçïÍµ∞", "Í≤ΩÎ∂Å/Î¥âÌôîÍµ∞", "Í≤ΩÎ∂Å/Ï≤≠ÏÜ°Íµ∞", "Í≤ΩÎ∂Å/ÏòÅÏñëÍµ∞", "Í≤ΩÎ∂Å/Ïö∏Î¶âÍµ∞"],
    4304: ["ÎåÄÍµ¨/ÏàòÏÑ±Íµ¨", "ÎåÄÍµ¨/Ï§ëÍµ¨", "ÎåÄÍµ¨/ÎÇ®Íµ¨", "Í≤ΩÎ∂Å/Í≤ΩÏÇ∞Ïãú", "Í≤ΩÎ∂Å/ÏùòÏÑ±Íµ∞", "Í≤ΩÎ∂Å/Ï≤≠ÎèÑÍµ∞", "Í≤ΩÎ∂Å/Íµ∞ÏúÑÍµ∞"],
    4305: ["Í≤ΩÎÇ®/Ï∞ΩÏõêÏãú ÎßàÏÇ∞Ìï©Ìè¨Íµ¨", "Í≤ΩÎÇ®/Ï∞ΩÏõêÏãú ÎßàÏÇ∞ÌöåÏõêÍµ¨", "Í≤ΩÎÇ®/Ï∞ΩÏõêÏãú ÏÑ±ÏÇ∞Íµ¨", "Í≤ΩÎÇ®/Ï∞ΩÏõêÏãú ÏùòÏ∞ΩÍµ¨", "Í≤ΩÎÇ®/Ï∞ΩÏõêÏãú ÏßÑÌï¥Íµ¨", "Í≤ΩÎÇ®/Ìï®ÏñëÍµ∞", "Í≤ΩÎÇ®/ÏÇ∞Ï≤≠Íµ∞"],
    4306: ["Î∂ÄÏÇ∞/ÏòÅÎèÑÍµ¨", "Î∂ÄÏÇ∞/ÏÇ¨ÌïòÍµ¨", "Í≤ΩÎÇ®/Í±∞Ï†úÏãú", "Í≤ΩÎÇ®/ÌÜµÏòÅÏãú", "Í≤ΩÎÇ®/ÏßÑÏ£ºÏãú", "Í≤ΩÎÇ®/ÏÇ¨Ï≤úÏãú", "Í≤ΩÎÇ®/Í≥†ÏÑ±Íµ∞", "Í≤ΩÎÇ®/ÎÇ®Ìï¥Íµ∞", "Í≤ΩÎÇ®/ÌïòÎèôÍµ∞"],
    4307: ["Î∂ÄÏÇ∞/Î∂ÅÍµ¨", "Î∂ÄÏÇ∞/ÎèôÍµ¨", "Í≤ΩÎÇ®/ÏñëÏÇ∞Ïãú", "Í≤ΩÎÇ®/ÍπÄÌï¥Ïãú"],
    4308: ["Ïö∏ÏÇ∞/ÎÇ®Íµ¨", "Ïö∏ÏÇ∞/ÎèôÍµ¨", "Ïö∏ÏÇ∞/Ï§ëÍµ¨", "Ïö∏ÏÇ∞/Î∂ÅÍµ¨", "Ïö∏ÏÇ∞/Ïö∏Ï£ºÍµ∞", "Î∂ÄÏÇ∞/Í∏∞Ïû•Íµ∞", "Í≤ΩÎÇ®/Î∞ÄÏñëÏãú", "Í≤ΩÎÇ®/Ï∞ΩÎÖïÍµ∞"],
    4309: ["Î∂ÄÏÇ∞/Ìï¥Ïö¥ÎåÄÍµ¨", "Î∂ÄÏÇ∞/ÏÇ¨ÏÉÅÍµ¨", "Î∂ÄÏÇ∞/ÏàòÏòÅÍµ¨", "Î∂ÄÏÇ∞/Í∏àÏ†ïÍµ¨", "Î∂ÄÏÇ∞/ÎÇ®Íµ¨", "Î∂ÄÏÇ∞/ÎèôÎûòÍµ¨"],
    4310: ["Î∂ÄÏÇ∞/Ïó∞Ï†úÍµ¨", "Î∂ÄÏÇ∞/ÏÑúÍµ¨", "Î∂ÄÏÇ∞/Ï§ëÍµ¨", "Î∂ÄÏÇ∞/Í∞ïÏÑúÍµ¨", "Î∂ÄÏÇ∞/Î∂ÄÏÇ∞ÏßÑÍµ¨", "Í≤ΩÎÇ®/Í±∞Ï∞ΩÍµ∞", "Í≤ΩÎÇ®/Ìï®ÏïàÍµ∞", "Í≤ΩÎÇ®/ÏùòÎ†πÍµ∞", "Í≤ΩÎÇ®/Ìï©Ï≤úÍµ∞"],
    6501: ["Ï†úÏ£º/Ï†úÏ£ºÏãú", "Ï†úÏ£º/ÏÑúÍ∑ÄÌè¨Ïãú"],*/
    others: [],
    GH: ["(Ìïô)Í∞ÄÌÜ®Î¶≠ÎåÄÌïôÍµêÏÑúÏö∏ÏÑ±Î™®Î≥ëÏõê", "(Ìïô)Ïπ¥ÌÜ®Î¶≠ÎåÄÌïôÍµêÏó¨ÏùòÎèÑÏÑ±Î™®Î≥ëÏõê", "Ïù∏Ï≤úÏÑ±Î™®Î≥ëÏõê (Ìïô)Í∞ÄÌÜ®Î¶≠ÎåÄÌïôÍµê", "(Ìïô)Í∞ÄÌÜ®Î¶≠ÌïôÏõêÏùòÏ†ïÎ∂ÄÏÑ±Î™®Î≥ëÏõê", "(Ìïô)Í∞ÄÌÜ®Î¶≠ÎåÄÌïôÍµêÎ∂ÄÏ≤úÏÑ±Î™®Î≥ëÏõê", "ÏÑ±ÎπàÏÑºÌä∏Î≥ëÏõê(Ìïô)Í∞ÄÌÜ®Î¶≠ÌïôÏõêÍ∞ÄÌÜ®Î¶≠ÎåÄÌïôÍµê", "Ïπ¥ÌÜ®Î¶≠ÎåÄÌïôÍµêÏùÄÌèâÏÑ±Î™®Î≥ëÏõê"],
    NIP: [],
    ÎèÑÎß§: []
  },

  clan: {
    local: [/*"1301", "1302", "1303", "1304", "1305", "1306", "1307",*/ "2301", "2302", "2303", "2304", "2305", "2306", "2307", /*"3301", "3302", "3303", "3304", "3305", "3306", "3307", "4301", "4302", "4303", "4304", "4305", "4306", "4307", "4308", "4309", "4310", "6501",*/ "others"],
    GH: ["GH"],
    NIP: ["NIP"],
    ÎèÑÎß§: ["ÎèÑÎß§"]
  },

  target: {
    A: [10008115, 10008158, 10008196, 10008206, 10008226, 10008238, 10008315, 10008324, 10008376, 10008378, 10008384, 10008400, 10008404, 10010994, 10012037, 10012585, 10037118, 10042310, 10042469, 10044110, 10050941, 10054496],
    B: [10008179, 10008195, 10008235, 10008268, 10008284, 10008293, 10008403, 10011038, 10011072, 10011078, 10034710, 10034905, 10035787, 10035949, 10038724, 10038972, 10039176, 10046460, 10046917, 10050899, 10051268, 10055541, 10058466, 10060994, 10063493, 10064917],
    C: [10008178, 10008183, 10008188, 10008219, 10008291, 10008312, 10008380, 10010631, 10010952, 10011058, 10035474, 10035867, 10051457, 10059254],
    D: []
  },

  resultArray: [],
  header: [],
  sumReport: {},

  processXML: function (data) {
    let dataArray = [];
    let rows = data.getElementsByTagName("Row");
    for (let i = 0; i < rows.length; i++) {
      let rowArray = [];
      for (let j = 0; j < rows[i].childElementCount; j++) {
        rowArray.push(rows[i].children[j].textContent);
      }
      dataArray.push(rowArray);
    }

    let idx = dataArray[0].indexOf("Ï£ºÏÜå"), idx2 = dataArray[0].indexOf("ÏùºÏûê");
    dataArray[0].push("ÏßÄÏó≠", "Territory", "Clan", "Period", "Grade");
    this.header = dataArray[0];
    for (let i = 1; i < dataArray.length; i++) {
      let address = dataArray[i][idx];
      let areaDist = addrDealer.getTicket(address);
      dataArray[i].push(areaDist);

      let territory = this.getTerr(dataArray[i]);
      dataArray[i].push(territory);
      for (let group in this.clan) {
        if (this.clan[group].indexOf(territory) != -1) dataArray[i].push(group);
      }

      let date = dataArray[i][idx2];
      let period = date.match(/-(\d{2})-/)[1] % 12 + 1 + "P";
      dataArray[i].push(period);

      let grade = this.getGrade(dataArray[i]);
      dataArray[i].push(grade);
    }
    this.resultArray = dataArray;
    //return dataArray;
  },

  getTerr: function (record) {
    let accountIdx = this.header.indexOf("Í±∞ÎûòÏ≤òÎ™Ö");
    let refIdx = this.header.indexOf("Íµ¨Î∂Ñ");
    let ticketIdx = this.header.indexOf("ÏßÄÏó≠");
    if (record[accountIdx].indexOf("Î≥¥Í±¥") != -1 && record[accountIdx].indexOf("ÏùòÏõê") == -1) {
      return "NIP";
    } else if (record[refIdx].indexOf("ÎèÑÎß§") != -1) {
      return "ÎèÑÎß§";
    } else if (this.terrOrg.GH.indexOf(record[accountIdx]) != -1) {
      return "GH";
    }
    for (let num in this.terrOrg) {
      if (this.terrOrg[num].indexOf(record[ticketIdx]) != -1) return num;
    }
    return "others";
  },

  getGrade: function (record) {
    let codeIdx = this.header.indexOf("Í±∞ÎûòÏ≤ò"), accountIdx = this.header.indexOf("Í±∞ÎûòÏ≤òÎ™Ö");
    const gradeTag = { A: "red", B: "blue", C: "yellowgreen" };
    for (let grade in this.target) {
      if (this.target[grade].indexOf(record[codeIdx] * 1) != -1) {
        record[accountIdx] = `<font color=${gradeTag[grade]}><sup>‚Ä¢</sup></font>${record[accountIdx]}`;
        return grade;
      }
    }
    return "D";
  },

  summerizer: function (criteria1, criteria2, criteria3, criteria4) {
    let summeryObj = {};
    this.sumReport = {};
    let salesIdx = this.header.indexOf("Îß§Ï∂úÎüâ");
    let idx = this.header.indexOf(criteria1);
    let idx2 = this.header.indexOf(criteria2);
    let idx3 = this.header.indexOf(criteria3);
    let idx4 = this.header.indexOf(criteria4);
    for (let i = 1; i < this.resultArray.length; i++) {
      let salesVol = this.resultArray[i][salesIdx].replace(",", "") * 1;
      let item = this.resultArray[i][idx], item2 = this.resultArray[i][idx2], item3 = this.resultArray[i][idx3], item4 = this.resultArray[i][idx4];
      if (summeryObj[item]) {
        if (criteria2) {
          if (summeryObj[item][item2]) {
            if (criteria3) {
              if (summeryObj[item][item2][item3]) {
                if (criteria4) {
                  if (summeryObj[item][item2][item3][item4]) {
                    summeryObj[item][item2][item3][item4] += salesVol;
                    this.sumReport[item][item2][item3] += salesVol;
                    this.sumReport[item][item2]["total"] += salesVol;
                    this.sumReport[item]["total"] += salesVol;
                    this.sumReport["Total"] += salesVol;
                  } else {
                    summeryObj[item][item2][item3][item4] = salesVol;
                    this.sumReport[item][item2][item3] += salesVol;
                    this.sumReport[item][item2]["total"] += salesVol;
                    this.sumReport[item]["total"] += salesVol;
                    this.sumReport["Total"] += salesVol;
                  }
                } else {
                  summeryObj[item][item2][item3] += salesVol;
                  this.sumReport[item][item2] += salesVol;
                  this.sumReport[item]["total"] += salesVol;
                  this.sumReport["Total"] += salesVol;
                }
              } else if (criteria4) {
                summeryObj[item][item2][item3] = {};
                summeryObj[item][item2][item3][item4] = salesVol;
                this.sumReport[item][item2][item3] = salesVol;
                this.sumReport[item][item2]["total"] += salesVol;
                this.sumReport[item]["total"] += salesVol;
                this.sumReport["Total"] += salesVol;
              } else {
                summeryObj[item][item2][item3] = salesVol;
                this.sumReport[item][item2] += salesVol;
                this.sumReport[item]["total"] += salesVol;
                this.sumReport["Total"] += salesVol;
              }
            } else {
              summeryObj[item][item2] += salesVol;
              this.sumReport[item] += salesVol;
              this.sumReport["Total"] += salesVol;
            }
          } else if (criteria3 && criteria4) {
            summeryObj[item][item2] = {};
            summeryObj[item][item2][item3] = {};
            summeryObj[item][item2][item3][item4] = salesVol;
            this.sumReport[item][item2] = {};
            this.sumReport[item][item2][item3] = salesVol;
            this.sumReport[item][item2]["total"] = salesVol;
            this.sumReport[item]["total"] += salesVol;
            this.sumReport["Total"] += salesVol;
          } else if (criteria3) {
            summeryObj[item][item2] = {};
            summeryObj[item][item2][item3] = salesVol;
            this.sumReport[item][item2] = salesVol;
            this.sumReport[item]["total"] += salesVol;
            this.sumReport["Total"] += salesVol;
          } else {
            summeryObj[item][item2] = salesVol;
            this.sumReport[item] += salesVol;
            this.sumReport["Total"] += salesVol;
          }
        } else {
          summeryObj[item] += salesVol;
          this.sumReport["Total"] += salesVol;
        }
      } else {
        if (criteria2) {
          summeryObj[item] = {};
          if (criteria3) {
            summeryObj[item][item2] = {};
            this.sumReport[item] = {};
            if (criteria4) {
              summeryObj[item][item2][item3] = {};
              summeryObj[item][item2][item3][item4] = salesVol;
              this.sumReport[item][item2] = {};
              this.sumReport[item][item2][item3] = salesVol;
              this.sumReport[item][item2]["total"] = salesVol;
              this.sumReport[item]["total"] = salesVol;
              this.sumReport["Total"] ?
                this.sumReport["Total"] += salesVol :
                this.sumReport["Total"] = salesVol;
            } else {
              summeryObj[item][item2][item3] = salesVol;
              this.sumReport[item][item2] = salesVol;
              this.sumReport[item]["total"] = salesVol;
              this.sumReport["Total"] ?
                this.sumReport["Total"] += salesVol :
                this.sumReport["Total"] = salesVol;
            }
          } else {
            summeryObj[item][item2] = salesVol;
            this.sumReport[item] = salesVol;
            this.sumReport["Total"] ?
              this.sumReport["Total"] += salesVol :
              this.sumReport["Total"] = salesVol;
          }
        } else {
          summeryObj[item] = salesVol;
          this.sumReport["Total"] ?
            this.sumReport["Total"] += salesVol :
            this.sumReport["Total"] = salesVol;
        }
      }
    }
    return summeryObj;
  }
};

/*
let area = dataDealer.terrOrg[terr];
let color = ["red", "orange", "yellowgreen", "green", "skyblue", "blue", "purple"];
let canvas = document.createElement("canvas");
canvas.height = 220, canvas.width = 320;
canvas.setAttribute("style", "{width: 300px; height: 220px;}");
let context = canvas.getContext("2d");
let startRad = -0.5 * Math.PI;
context.fillStyle = "darkolivegreen";
context.font = "1.6em Lucida Grande";
context.fillText("üç© Territory ÎÇ¥ ÏßÄÏó≠Î≥Ñ ÎπÑÏ§ë üçâ", 20, 30);
for (let i = 0; i < area.length; i++) {
  let areaSales = coverData[terr][area[i]];
  //let portion = (areaSales? areaSales : 0) / report.local[terr];
  //let posiRad = startRad + (0.5 + portion) * Math.PI;
  content.innerHTML += `<li class="item" id="${area[i]}">${area[i]}: ${areaSales? areaSales : 0}
    (${((areaSales? areaSales : 0)/localSum * 100).toFixed(1)}%)</li>`;
  context.beginPath();
  context.arc(125, 130, 65, startRad, startRad + portion * 2 * Math.PI, areaSales > 0 ? false : true);
  context.lineTo(125, 130);
  context.fillStyle = color[i];
  context.fill();
  context.fillRect(235, (canvas.height + 50) / 2 - 23 * area.length / 2 + 23 * i, 7, 7);
  if(portion > 0.01) {
    context.fillStyle = "black";
    context.font = "1.2em Lucida Grande";
    context.fillText((portion * 100).toFixed(0) + "%", 116 + 80 * Math.sin(posiRad), 136 - 80 * Math.cos(posiRad));
  }
  context.font = "1em Lucida Grande";
  context.fillText(area[i].substr(3), 250, (canvas.height + 63) / 2 - 23 * area.length / 2 + 23 * i);
  context.closePath();
  startRad += portion * 2 * Math.PI;
}
content.appendChild(canvas);


let xhr = new XMLHttpRequest();
let accountHistory = {};
xhr.overrideMimeType("text/xml");
xhr.onreadystatechange = function() {
  if (this.readyState == 4 && this.status == 200) {
    dataDealer.processXML(this.responseXML);
    let accountSales = dataDealer.summerizer("Í±∞ÎûòÏ≤òÎ™Ö", "ÏùºÏûê");
    for (let account in accountSales) {
      if (accountHistory[account]) {
        for (let date in accountSales[account]) {
          accountHistory[account][date] = accountSales[account][date];
        }
      } else {
        accountHistory[account] = {};
        for (let date in accountSales[account]) {
          accountHistory[account][date] = accountSales[account][date];
        }
      }
    }
  }
};
for (let i = 0; i < 12; i++) {
  xhr.open("GET", "/data/CKD Prevenar Sales data(2021." + (i > 8 ? (i + 1) : "0" + (i + 1)) + ").xls", false);
  xhr.send();
}
//console.log(accountHistory);
*/

